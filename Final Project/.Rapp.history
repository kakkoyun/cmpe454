net <- randomNetwork(newdeg)
libary(sna)
library(sna)
library(network)
library(sna)
network.initialize()
Purpose : Order degree distribution and produce degree sequence.#
makeDegreeSequnence <- function(degDist){#
  sort(degDist)#
}#
#
initializeGraph <- function(n){#
  net <- network.initialize(n, directed = FALSE, multiple = TRUE)#
  net#
}#
#
# Assuptions:#
# -- Undirected and#
# -- Weighted Graphs to be produced.#
#
# randomNetwork : vector -> network#
# Purpose : Generates a random network through given degree distribution by using,#
#         - distribution model.#
randomNetwork <- function(degDist){#
  degSeq <- makeDegreeSequnence(degDist)#
  net <- initializeGraph(length(degSeq))#
  while(length(degSeq) >= 0){#
    a <- sample(degSeq, 1, replace=T)#
    b <- sample(degSeq, 1, replace=T)#
    indexA <- match(c(a), degSeq)#
    indexB <- match(c(b), degSeq)#
    add.edges(net, indexA, indexB)#
    if((a == 1) && (b > 1)){#
      degSeq <- degSeq[-indexA]#
      degSeq[indexB] <- (b - 1)#
    } else if ((b == 1) && (a > 1)) {#
      degSeq <- degSeq[-indexB]#
      degSeq[indexA] <- (a - 1)#
    } else if ((a == 1) && (b == 1)) {#
     degSeq <- degSeq[-indexA]#
     degSeq <- degSeq[-indexB]#
    } else {#
      degSeq[indexA] <- (a - 1)#
      degSeq[indexB] <- (b - 1)#
    }#
    degSeq <- makeDegreeSequnence(degSeq)#
  }#
  net#
}
newdeg = c(5,2,3)
net <- randomNetwork(newdeg)
library(network)
library(sna)
clear()
degSeq
Reduce(+, degSeq == 1)
Reduce("+", degSeq == 1)
Reduce("+", degSeq)
makeDegreeSequnence <- function(degDist){#
  sort(degDist)#
}#
#
initializeGraph <- function(n){#
  net <- network.initialize(n, directed = FALSE)#
  net#
}#
#
randomNode <- function(degSeq){#
  x <- sample(degSeq, 1, replace=T)#
  while(x <= 0){#
    x <- sample(degSeq, 1, replace=T)#
  }#
  x#
}#
#
# Assuptions:#
# -- Undirected and#
# -- Weighted Graphs to be produced.#
#
# randomNetwork : vector -> network#
# Purpose : Generates a random network through given degree distribution by using,#
#         - distribution model.#
randomNetwork <- function(degDist){#
  degSeq <- makeDegreeSequnence(degDist)#
  net <- initializeGraph(length(degSeq))#
  while(Reduce("+", degSeq) > 1){#
    a <- randomNode(degSeq)#
    b <- randomNode(degSeq)#
    indexA <- match(c(a), degSeq)#
    indexB <- match(c(b), degSeq)#
    add.edges(net, indexA, indexB)#
    degSeq[indexA] <- (a - 1)#
    degSeq[indexB] <- (b - 1)#
  }#
  net#
}
net <- randomNetwork(newdeg)
net
plot(net)
newdeg
degSeq
net <- randomNetwork(degSeq)
net
plot(net)
newdeg = c(2,2,3,1,5,0,4,4,3,2)
net <- randomNetwork(newdeg)
plot(net)
net <- randomNetwork(newdeg)
plot(net)
net <- randomNetwork(newdeg)
plot(net)
net <- randomNetwork(newdeg)
plot(net)
net <- randomNetwork(newdeg)
plot(net)
gplot(net, gmode="graph")
gplot(data_matrix, coord=position_matrix, gmode="graph", jitter=FALSE,displaylabels=TRUE, boxed.labels=FALSE, label.pos=1, edge.lwd=5,edge.col=matrix(rgb(0, 0, 0, data_matrix), nrow=netSize))
data_matrix <- net
gplot(data_matrix, coord=position_matrix, gmode="graph", jitter=FALSE,displaylabels=TRUE, boxed.labels=FALSE, label.pos=1, edge.lwd=5,edge.col=matrix(rgb(0, 0, 0, data_matrix), nrow=netSize))
gplot(data_matrix, gmode="graph", jitter=FALSE,displaylabels=TRUE, boxed.labels=FALSE, label.pos=1, edge.lwd=5,edge.col=matrix(rgb(0, 0, 0, data_matrix), nrow=netSize))
gplot(data_matrix, gmode="graph", jitter=FALSE,displaylabels=TRUE, boxed.labels=FALSE, label.pos=1, edge.lwd=5, nrow=netSize))
gplot(data_matrix, gmode="graph", jitter=FALSE,displaylabels=TRUE, boxed.labels=FALSE, label.pos=1, edge.lwd=5, nrow=netSize)
gplot(data_matrix, gmode="graph", jitter=FALSE,displaylabels=TRUE, boxed.labels=FALSE, label.pos=1, edge.lwd=5)
gplot(net, edge.lwd=net%e%weight)
gplot(net, edge.lwd=net%e%net$weight)
gplot(net, gmode = 'graph', label = net %v% 'vertex.names')
degSeq <- c(1,1,2,2,3,4,4,4,5,7)#
net <- randomNetwork(degSeq)#
gplot(net, gmode = 'graph', label = net %v% 'vertex.names')
library(RSiena)
install.packages("RSiena")
library(RSiena)
Obtain relational leisure data from given data files.#
friend.data.w1 <- as.matrix(read.csv("Input/Leisure2010.csv", sep = "\t", header = FALSE))#
friend.data.w2 <- as.matrix(read.csv("Input/Leisure2011.csv", sep = "\t", header = FALSE))#
friend.data.w3 <- as.matrix(read.csv("Input/Leisure2012.csv", sep = "\t", header = FALSE))#
#
# Obtain attribute data from given data files.
dir
dir()
cd('Documents/Projects')
source("/Users/rev/Documents/Projects/Cmpe454/Final Project/CoEvalModel.R")
ls()
source("/Users/rev/Documents/Projects/Cmpe454/Final Project/CoEvalModel.R")
source("/Users/rev/Documents/Projects/Cmpe454/Final Project/CoEvalModel.R")
ls
ls()
friend.data.w1
friend.data.w2
friend.data.w3
source("/Users/rev/Documents/Projects/Cmpe454/Final Project/CoEvalModel.R")
summary(ans)
ans
ans
?getEffects
source("/Users/rev/Documents/Projects/Cmpe454/Final Project/CoEvalModel.R")
summary(ans)
source("/Users/rev/Documents/Projects/Cmpe454/Final Project/CoEvalModel.R")
summary(ans)
gplot(ans)
import net
library(net)
library(sna))
library(sna)
library(sna)
gplot(ans)
gplot(gpa.performance)
gplot(friendship)
gplot(friendship#Network Visualisation#
visualizeNetwork <- function(Network, Attributes, nvertices, fname){	vsize <- Attributes$In.Degree / 1.5#
	#You might need to play with the number for a better visualization.#
	for (i in 1:nvertices){#
		Attributes$Gender.Color[i]  <- 'grey'#
		if (Attributes$Gender[i] == 'M' ) Attributes$Gender.Color[i]  <- 'lightblue2'#
		if (Attributes$Gender[i] == 'F' ) Attributes$Gender.Color[i]  <- 'pink'#
		}#
	Network %v% 'Gender.Color' <- as	.vector(Attributes$Gender.Color)#
	png(fname, width = 1024, height = 1024, pointsize=24)#
	gplot(Network, gmode = 'digraph', label=Network%v%'GPA', label.cex = 0.8, boxed.labels = T, vertex.cex = vsize, label.bg = Network%v%'Gender.Color')#
	dev.off()#
	Network#
	})
gplot(friendship#Network Visualisation#
visualizeNetwork <- function(Network, Attributes, nvertices, fname){	vsize <- Attributes$In.Degree / 1.5#
	#You might need to play with the number for a better visualization.#
	for (i in 1:nvertices){#
		Attributes$Gender.Color[i]  <- 'grey'#
		if (Attributes$Gender[i] == 'M' ) Attributes$Gender.Color[i]  <- 'lightblue2'#
		if (Attributes$Gender[i] == 'F' ) Attributes$Gender.Color[i]  <- 'pink'#
		}#
	Network %v% 'Gender.Color' <- as	.vector(Attributes$Gender.Color)#
	png(fname, width = 1024, height = 1024, pointsize=24)#
	gplot(Network, gmode = 'digraph', label=Network%v%'GPA', label.cex = 0.8, boxed.labels = T, vertex.cex = vsize, label.bg = Network%v%'Gender.Color')#
	dev.off()#
	Network#
	})
visualizeNetwork <- function(Network, Attributes, nvertices, fname){	vsize <- Attributes$In.Degree / 1.5#
	#You might need to play with the number for a better visualization.#
	for (i in 1:nvertices){#
		Attributes$Gender.Color[i]  <- 'grey'#
		if (Attributes$Gender[i] == 'M' ) Attributes$Gender.Color[i]  <- 'lightblue2'#
		if (Attributes$Gender[i] == 'F' ) Attributes$Gender.Color[i]  <- 'pink'#
		}#
	Network %v% 'Gender.Color' <- as	.vector(Attributes$Gender.Color)#
	png(fname, width = 1024, height = 1024, pointsize=24)#
	gplot(Network, gmode = 'digraph', label=Network%v%'GPA', label.cex = 0.8, boxed.labels = T, vertex.cex = vsize, label.bg = Network%v%'Gender.Color')#
	dev.off()#
	Network#
	}
visualizeNetwork <- function(Network, Attributes, nvertices, fname){	vsize <- Attributes$In.Degree / 1.5#
	#You might need to play with the number for a better visualization.#
	for (i in 1:nvertices){#
		Attributes$Gender.Color[i]  <- 'grey'#
		if (Attributes$Gender[i] == 'M' ) Attributes$Gender.Color[i]  <- 'lightblue2'#
		if (Attributes$Gender[i] == 'F' ) Attributes$Gender.Color[i]  <- 'pink'#
		}#
	Network %v% 'Gender.Color' <- as	.vector(Attributes$Gender.Color)#
	png(fname, width = 1024, height = 1024, pointsize=24)#
	gplot(Network, gmode = 'digraph', label=Network%v%'GPA', label.cex = 0.8, boxed.labels = T, vertex.cex = vsize, label.bg = Network%v%'Gender.Color')#
	dev.off()#
	Network#
	}
Network Visualisation#
visualizeNetwork <- function(Network, Attributes, nvertices, fname){	vsize <- Attributes$In.Degree / 1.5#
	#You might need to play with the number for a better visualization.#
	for (i in 1:nvertices){#
		Attributes$Gender.Color[i]  <- 'grey'#
		if (Attributes$Gender[i] == 'M' ) Attributes$Gender.Color[i]  <- 'lightblue2'#
		if (Attributes$Gender[i] == 'F' ) Attributes$Gender.Color[i]  <- 'pink'#
		}#
	Network %v% 'Gender.Color' <- as.vector(Attributes$Gender.Color)#
	png(fname, width = 1024, height = 1024, pointsize=24)#
	gplot(Network, gmode = 'digraph', label=Network%v%'GPA', label.cex = 0.8, boxed.labels = T, vertex.cex = vsize, label.bg = Network%v%'Gender.Color')#
	dev.off()#
	Network#
	}
gLeisure2010 <- visualizeNetwork(friend.data.w1, friend.data.w2, nvertices, "Leisure2010_OutDegree.png")
gLeisure2010 <- visualizeNetwork(friend.data.w1, friend.data.w2, nvertices, "Leisure2010_OutDegree.png")getNodeCentralities <- function(Attributes, Network){#
	Attributes$Total.Degree <- degree(Network)#
	Attributes$In.Degree <- degree(Network, cmode = 'indegree')#
	Attributes$Out.Degree <- degree(Network, cmode = 'outdegree')#
	Attributes$Betweenness <- betweenness(Network)#
	Attributes$Closeness <- closeness(Network)#
	Attributes#
	}
getNodeCentralities <- function(Attributes, Network){#
	Attributes$Total.Degree <- degree(Network)#
	Attributes$In.Degree <- degree(Network, cmode = 'indegree')#
	Attributes$Out.Degree <- degree(Network, cmode = 'outdegree')#
	Attributes$Betweenness <- betweenness(Network)#
	Attributes$Closeness <- closeness(Network)#
	Attributes#
	}
AttributesWork2010 <- getNodeCentralities(friend.data.w1, friend.data.w1)
updateNetwork <-function(Network, Attributes, type){#
	Network %n% 'Tie Type' <- type#
	Network %v% 'Genders' <- as.vector(Attributes$Gender)#
	Network %v% 'Department' <- as.vector(Attributes$Department)#
	Network %v% 'Student.ID' <- as.vector(Attributes$Student.ID)#
	Network %v% 'Name' <- as.vector(Attributes$Name)#
	GPA <- as.vector(Attributes$GPA)#
	Network %v% 'GPA' <- as.numeric(GPA)#
	Network#
	}
gWork2010 <- updateNetwork(gWork2010, friend.data.w1, 'Work Time')
gWork2011 <- as.network.matrix(friend.data.w1, matrix.type="adjacency")
library(network)
library(network)
gWork2011 <- as.network.matrix(friend.data.w1, matrix.type="adjacency")
gWork2011 <- as.network.matrix(friend.data.w1, matrix.type="adjacency")
gWork2011 <- updateNetwork(gWork2011, friend.data.w1, 'Work Time')
source("/Users/rev/Documents/Projects/Cmpe454/Final Project/CoEvalModel.R")
source("/Users/rev/Documents/Projects/Cmpe454/Final Project/CoEvalModel.R")
gpaCoEvolutionData <- sienaDataCreate(friendship, gpa.performance)#
gpaCoEvolutionEff <- getEffects(gpaCoEvolutionData)#
gpaCoEvolutionEff <- includeEffects(gpaCoEvolutionEff,#
                name = "gpa.friendship", indeg, outdeg,#
                interaction1 = "friendship", include = FALSE)#
gpaCoEvAlgorithm <- sienaModelCreate(projname = 'Output/GPAFriendship')#
ans2 <- siena07(gpaCoEvAlgorithm,#
               data = gpaCoEvolutionData,#
               effects = gpaCoEvolutionEff,#
               batch = TRUE)
genderCoEvolutionData <- sienaDataCreate(gender, gpa.performance)#
genderCoEvolutionEff <- getEffects(genderCoEvolutionData)#
genderCoEvolutionEff <- includeEffects(genderCoEvolutionEff,#
                name = "gender.gpa", indeg, outdeg,#
                interaction1 = "gpa.performance", include = FALSE)#
genderCoEvAlgorithm <- sienaModelCreate(projname = 'Output/GenderGPA')#
ans3 <- siena07(genderCoEvAlgorithm,#
               data = genderCoEvolutionData,#
               effects = genderCoEvolutionEff,#
               batch = TRUE)
genderCoEvolutionData <- sienaDataCreate(gender, gpa.performance)#
genderCoEvolutionEff <- getEffects(genderCoEvolutionData)#
genderCoEvolutionEff <- includeEffects(genderCoEvolutionEff,#
                name = "gender.gpa", indeg, outdeg,#
                interaction1 = "gpa.performance", include = FALSE)#
genderCoEvAlgorithm <- sienaModelCreate(projname = 'Output/GenderGPA')#
ans3 <- siena07(genderCoEvAlgorithm,#
               data = genderCoEvolutionData,#
               effects = genderCoEvolutionEff,#
               batch = TRUE)
source("/Users/rev/Documents/Projects/Cmpe454/Final Project/CoEvalModel.R")
hometown2CoEvolutionData <- sienaDataCreate(hometown1, gpa.performance)#
hometown2CoEvolutionEff <- getEffects(hometown2CoEvolutionData)#
hometown2EvolutionEff <- includeEffects(hometown2CoEvolutionEff,#
                name = "hometown.gpa", indeg, outdeg,#
                interaction1 = "gpa.performance", include = FALSE)#
hometown2CoEvAlgorithm <- sienaModelCreate(projname = 'Output/HometownGPA')#
ans4 <- siena07(hometown2CoEvAlgorithm,#
               data = hometown2CoEvolutionData,#
               effects = hometown2CoEvolutionEff,#
               batch = TRUE)
source("/Users/rev/Documents/Projects/Cmpe454/Final Project/CoEvalModel.R")
hometown2CoEvolutionData <- sienaDataCreate(hometown1, gpa.performance)#
hometown2CoEvolutionEff <- getEffects(hometown2CoEvolutionData)#
hometown2CoEvolutionEff <- includeEffects(hometown2CoEvolutionEff,#
                name = "hometown.gpa", indeg, outdeg,#
                interaction1 = "gpa.performance", include = FALSE)
hometown2CoEvolutionData <- sienaDataCreate(hometown1, gpa.performance)#
hometown2CoEvolutionEff <- getEffects(hometown2CoEvolutionData)
hometown2CoEvolutionEff <- includeEffects(hometown2CoEvolutionEff,#
                name = "hometown.gpa", indeg, outdeg,#
                interaction1 = "gpa.performance", include = FALSE)
hometown2CoEvAlgorithm <- sienaModelCreate(projname = 'Output/HometownGPA')
ans4 <- siena07(hometown2CoEvAlgorithm,#
               data = hometown2CoEvolutionData,#
               effects = hometown2CoEvolutionEff,#
               batch = TRUE)
hometown2CoEvolutionData <- sienaDataCreate(hometown1, gpa.performance)#
hometown2CoEvolutionEff <- getEffects(hometown2CoEvolutionData)#
hometown2CoEvolutionEff <- includeEffects(hometown2CoEvolutionEff,#
                name = "hometown.gpa", indeg, outdeg,#
                interaction1 = "hometown1", include = FALSE)#
hometown2CoEvAlgorithm <- sienaModelCreate(projname = 'Output/HometownGPA')#
ans4 <- siena07(hometown2CoEvAlgorithm,#
               data = hometown2CoEvolutionData,#
               effects = hometown2CoEvolutionEff,#
               batch = TRUE)
genderCoEvolutionData <- sienaDataCreate(gender1, gpa.performance)#
genderCoEvolutionEff <- getEffects(genderCoEvolutionData)#
genderCoEvolutionEff <- includeEffects(genderCoEvolutionEff,#
                name = "gender.gpa", indeg, outdeg,#
                interaction1 = "gpa.performance", include = FALSE)#
genderCoEvAlgorithm <- sienaModelCreate(projname = 'Output/GenderGPA')#
ans3 <- siena07(genderCoEvAlgorithm,#
               data = genderCoEvolutionData,#
               effects = genderCoEvolutionEff,#
               batch = TRUE)
gpaCoEvolutionData <- sienaDataCreate(friendship, gpa.performance)#
gpaCoEvolutionEff <- getEffects(gpaCoEvolutionData)#
gpaCoEvolutionEff <- includeEffects(gpaCoEvolutionEff,#
                name = "gpa.friendship", indeg, outdeg,#
                interaction1 = "friendship", include = FALSE)#
gpaCoEvAlgorithm <- sienaModelCreate(projname = 'Output/GPAFriendship')#
ans2 <- siena07(gpaCoEvAlgorithm,#
               data = gpaCoEvolutionData,#
               effects = gpaCoEvolutionEff,#
               batch = TRUE)
?sienaDataCreate
hometown2CoEvAlgorithm <- sienaModelCreate(projname = 'Output/HometownGPA')
source("/Users/rev/Documents/Projects/Cmpe454/Final Project/CoEvalModel.R")
summary(ans0)#
summary(ans1)#
summary(ans2)#
summary(ans3)
summary(ans0)#
summary(ans1)#
summary(ans2)#
summary(ans4)
library(sna)#
library(network)#
#
Leisure2010 <- read.csv("Input/Leisure2010.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2011 <- read.csv("Input/Leisure2011.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2012 <- read.csv("Input/Leisure2012.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
#
nvertices <- length(Leisure2010$X)#
#
mLeisure2010 <- as.matrix(Leisure2010[,1:nvertices + 1])#
mLeisure2011 <- as.matrix(Leisure2011[,1:nvertices + 1])#
mLeisure2012 <- as.matrix(Leisure2012[,1:nvertices + 1])#
#
gLeisure2010 <- as.network.matrix(mLeisure2010, matrix.type="adjacency")#
plot(gLeisure2010)#
gLeisure2011 <- as.network.matrix(mLeisure2011, matrix.type="adjacency")#
plot(gLeisure2011)#
gLeisure2012 <- as.network.matrix(mLeisure2012, matrix.type="adjacency")#
plot(gLeisure2012)#
#
Hometown <- read.csv("Input/HomeTown.csv", header = FALSE)#
GPA <- read.csv("Input/GPA.csv", header = FALSE)#
Gender <- read.csv("Input/Gender.csv", header = FALSE)#
#
updateNetwork <-function(Network, Attributes, Name){#
	Network %v% Name <- as.vector(Attributes)#
	Network#
	}#
updateNetworkGPA <-function(Network, Attributes){#
	GPA <- as.vector(Attributes)#
	Network %v% 'GPA' <- as.numeric(GPA)#
	Network#
	}
library(sna)#
library(network)#
#
Leisure2010 <- read.csv("Input/Leisure2010.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2011 <- read.csv("Input/Leisure2011.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2012 <- read.csv("Input/Leisure2012.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
#
nvertices <- length(Leisure2010$X)#
#
mLeisure2010 <- as.matrix(Leisure2010[,1:nvertices])#
mLeisure2011 <- as.matrix(Leisure2011[,1:nvertices])#
mLeisure2012 <- as.matrix(Leisure2012[,1:nvertices])#
#
gLeisure2010 <- as.network.matrix(mLeisure2010, matrix.type="adjacency")#
plot(gLeisure2010)#
gLeisure2011 <- as.network.matrix(mLeisure2011, matrix.type="adjacency")#
plot(gLeisure2011)#
gLeisure2012 <- as.network.matrix(mLeisure2012, matrix.type="adjacency")#
plot(gLeisure2012)#
#
Hometown <- read.csv("Input/HomeTown.csv", header = FALSE)#
GPA <- read.csv("Input/GPA.csv", header = FALSE)#
Gender <- read.csv("Input/Gender.csv", header = FALSE)#
#
updateNetwork <-function(Network, Attributes, Name){#
	Network %v% Name <- as.vector(Attributes)#
	Network#
	}#
updateNetworkGPA <-function(Network, Attributes){#
	GPA <- as.vector(Attributes)#
	Network %v% 'GPA' <- as.numeric(GPA)#
	Network#
	}
Leisure2010
as.matrix(Leisure2010[,1:nvertices])
mLeisure2010 <- as.matrix(Leisure2010[,1:nvertices])
mLeisure2010
nvertices
nvertices <- length(Leisure2010$X)
length(Leisure2010$X)
length(Leisure2010)
library(sna)#
library(network)#
#
Leisure2010 <- read.csv("Input/Leisure2010.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2011 <- read.csv("Input/Leisure2011.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2012 <- read.csv("Input/Leisure2012.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
#
nvertices <- length(Leisure2010)#
#
mLeisure2010 <- as.matrix(Leisure2010[,1:nvertices])#
mLeisure2011 <- as.matrix(Leisure2011[,1:nvertices])#
mLeisure2012 <- as.matrix(Leisure2012[,1:nvertices])#
#
gLeisure2010 <- as.network.matrix(mLeisure2010, matrix.type="adjacency")#
plot(gLeisure2010)#
gLeisure2011 <- as.network.matrix(mLeisure2011, matrix.type="adjacency")#
plot(gLeisure2011)#
gLeisure2012 <- as.network.matrix(mLeisure2012, matrix.type="adjacency")#
plot(gLeisure2012)#
#
Hometown <- read.csv("Input/HomeTown.csv", header = FALSE)#
GPA <- read.csv("Input/GPA.csv", header = FALSE)#
Gender <- read.csv("Input/Gender.csv", header = FALSE)#
#
updateNetwork <-function(Network, Attributes, Name){#
	Network %v% Name <- as.vector(Attributes)#
	Network#
	}#
updateNetworkGPA <-function(Network, Attributes){#
	GPA <- as.vector(Attributes)#
	Network %v% 'GPA' <- as.numeric(GPA)#
	Network#
	}
plot(gLeisure2010)
plot(gLeisure2011)
plot(gLeisure2012)
gLeisure2010 <- updateNetwork(gLeisure2010, Hometown, 'Hometown')#
gLeisure2010 <- updateNetwork(gLeisure2010, Gender, 'Gender')#
gLeisure2010 <- updateNetworkGPA(gLeisure2010, GPA)#
gLeisure2011 <- updateNetwork(gLeisure2011, Hometown, 'Hometown')#
gLeisure2011 <- updateNetwork(gLeisure2011, Gender, 'Gender')#
gLeisure2011 <- updateNetwork(gLeisure2011, GPA)#
gLeisure2012 <- updateNetwork(gLeisure2012, Hometown, 'Hometown')#
gLeisure2012 <- updateNetwork(gLeisure2012, Gender, 'Gender')#
gLeisure2012 <- updateNetwork(gLeisure2012, GPA)#
#
summary(gLeisure2010)#
summary(gLeisure2011)#
summary(gLeisure2012)
Hometown2010 <- asHometown, Gender, GPA
Hometown2010 <- Hometown, Gender, GPA
Hometown
Hometown2010 <- as.matrix(Hometown, Gender, GPA)
Hometown2010
Hometown2010 <- as.matrix(Hometown, Gender,GPA)
Hometown2010 <- rbind(Hometown, Gender,GPA)
Hometown
Gender
GPA
GPA$V!
GPA$V1
Hometown2010 <- rbind(Hometown, Gender,GPA$V1)
Hometown2010
Hometown2010 <- rbind(Hometown, Gender)
Hometown2010
Hometown2010 <- cbind(Hometown, Gender)
Hometown2010
Hometown2010 <- rbind(cbind(Hometown, Gender), GPA$V1)
Hometown2010
Hometown2010 <- cbind(Hometown, Gender)
Hometown2010
Hometown2010 <- cbind(Hometown, Gender, GPA$V1)
Hometown2010
Hometown2010 <- cbind(Hometown, Gender, GPA)
Hometown2010
Hometown2010[1]
Hometown2010[2]
Hometown2010[3]
Hometown2010#
library(sna)#
library(network)#
#
Leisure2010 <- read.csv("Input/Leisure2010.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2011 <- read.csv("Input/Leisure2011.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2012 <- read.csv("Input/Leisure2012.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
#
nvertices <- length(Leisure2010)#
#
mLeisure2010 <- as.matrix(Leisure2010[,1:nvertices])#
mLeisure2011 <- as.matrix(Leisure2011[,1:nvertices])#
mLeisure2012 <- as.matrix(Leisure2012[,1:nvertices])#
#
gLeisure2010 <- as.network.matrix(mLeisure2010, matrix.type="adjacency")#
plot(gLeisure2010)#
gLeisure2011 <- as.network.matrix(mLeisure2011, matrix.type="adjacency")#
plot(gLeisure2011)#
gLeisure2012 <- as.network.matrix(mLeisure2012, matrix.type="adjacency")#
plot(gLeisure2012)#
#
Hometown <- read.csv("Input/HomeTown.csv", header = FALSE)#
GPA <- read.csv("Input/GPA.csv", header = FALSE)#
Gender <- read.csv("Input/Gender.csv", header = FALSE)#
#
updateNetwork <-function(Network, Attributes, Name){#
	Network %v% Name <- as.vector(Attributes)#
	Network#
	}#
updateNetworkGPA <-function(Network, Attributes){#
	GPA <- as.vector(Attributes)#
	Network %v% 'GPA' <- as.numeric(GPA)#
	Network#
	}#
#
gLeisure2010 <- updateNetwork(gLeisure2010, Hometown, 'Hometown')#
gLeisure2010 <- updateNetwork(gLeisure2010, Gender, 'Gender')#
gLeisure2010 <- updateNetworkGPA(gLeisure2010, GPA)#
gLeisure2011 <- updateNetwork(gLeisure2011, Hometown, 'Hometown')#
gLeisure2011 <- updateNetwork(gLeisure2011, Gender, 'Gender')#
gLeisure2011 <- updateNetwork(gLeisure2011, GPA)#
gLeisure2012 <- updateNetwork(gLeisure2012, Hometown, 'Hometown')#
gLeisure2012 <- updateNetwork(gLeisure2012, Gender, 'Gender')#
gLeisure2012 <- updateNetwork(gLeisure2012, GPA)#
#
summary(gLeisure2010)#
summary(gLeisure2011)#
summary(gLeisure2012)#
#
AttributesLeisure2010 <- cbind(Hometown, Gender, GPA$V1)#
AttributesLeisure2011 <- cbind(Hometown, Gender, GPA$V2)#
AttributesLeisure2012 <- cbind(Hometown, Gender, GPA$V3)#
#
getNodeCentralities <- function(Attributes, Network){#
	Attributes$Total.Degree <- degree(Network)#
	Attributes$In.Degree <- degree(Network, cmode = 'indegree')#
	Attributes$Out.Degree <- degree(Network, cmode = 'outdegree')#
	Attributes$Betweenness <- betweenness(Network)#
	Attributes$Closeness <- closeness(Network)#
	Attributes#
	}#
#
AttributesLeisure2010 <- getNodeCentralities(AttributesLeisure2010, gLeisure2010)#
AttributesLeisure2011 <- getNodeCentralities(AttributesLeisure2011, gLeisure2011)#
AttributesLeisure2012 <- getNodeCentralities(AttributesLeisure2012, gLeisure2012)
AttributesLeisure2010
Network Visualisation#
visualizeNetwork <- function(Network, Attributes, nvertices, fname){	vsize <- Attributes$In.Degree / 1.5#
	#You might need to play with the number for a better visualization.#
	for (i in 1:nvertices){#
		Attributes$Gender.Color[i]  <- 'grey'#
		if (Attributes$Gender[i] == '0' ) Attributes$Gender.Color[i]  <- 'lightblue2'#
		if (Attributes$Gender[i] == '1' ) Attributes$Gender.Color[i]  <- 'pink'#
		}#
	Network %v% 'Gender.Color' <- as.vector(Attributes$Gender.Color)#
	png(fname, width = 1024, height = 1024, pointsize=24)#
	gplot(Network, gmode = 'digraph', label=Network%v%'GPA', label.cex = 0.8, boxed.labels = T, vertex.cex = vsize, label.bg = Network%v%'Gender.Color')#
	dev.off()#
	Network#
	}#
#
gLeisure2010 <- visualizeNetwork(gLeisure2010, AttributesLeisure2010, nvertices, "Output/Leisure2010_InDegree.png")#
gLeisure2011 <- visualizeNetwork(gLeisure2011, AttributesLeisure2011, nvertices, "Output/Leisure2011_InDegree.png")#
gLeisure2012 <- visualizeNetwork(gLeisure2012, AttributesLeisure2012, nvertices, "Output/Leisure2012_InDegree.png")
library(sna)#
library(network)#
#
Leisure2010 <- read.csv("Input/Leisure2010.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2011 <- read.csv("Input/Leisure2011.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2012 <- read.csv("Input/Leisure2012.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
#
nvertices <- length(Leisure2010)#
#
mLeisure2010 <- as.matrix(Leisure2010[,1:nvertices])#
mLeisure2011 <- as.matrix(Leisure2011[,1:nvertices])#
mLeisure2012 <- as.matrix(Leisure2012[,1:nvertices])#
#
gLeisure2010 <- as.network.matrix(mLeisure2010, matrix.type="adjacency")#
plot(gLeisure2010)#
gLeisure2011 <- as.network.matrix(mLeisure2011, matrix.type="adjacency")#
plot(gLeisure2011)#
gLeisure2012 <- as.network.matrix(mLeisure2012, matrix.type="adjacency")#
plot(gLeisure2012)#
#
Hometown <- read.csv("Input/HomeTown.csv", header = FALSE)#
GPA <- read.csv("Input/GPA.csv", header = FALSE)#
Gender <- read.csv("Input/Gender.csv", header = FALSE)#
#
updateNetwork <-function(Network, Attributes, Name){#
	Network %v% Name <- as.vector(Attributes)#
	Network#
	}#
updateNetworkGPA <-function(Network, Attributes){#
	GPA <- as.vector(Attributes)#
	Network %v% 'GPA' <- as.numeric(GPA)#
	Network#
	}#
#
gLeisure2010 <- updateNetwork(gLeisure2010, Hometown, 'Hometown')#
gLeisure2010 <- updateNetwork(gLeisure2010, Gender, 'Gender')#
gLeisure2010 <- updateNetworkGPA(gLeisure2010, GPA)#
gLeisure2011 <- updateNetwork(gLeisure2011, Hometown, 'Hometown')#
gLeisure2011 <- updateNetwork(gLeisure2011, Gender, 'Gender')#
gLeisure2011 <- updateNetwork(gLeisure2011, GPA)#
gLeisure2012 <- updateNetwork(gLeisure2012, Hometown, 'Hometown')#
gLeisure2012 <- updateNetwork(gLeisure2012, Gender, 'Gender')#
gLeisure2012 <- updateNetwork(gLeisure2012, GPA)#
#
summary(gLeisure2010)#
summary(gLeisure2011)#
summary(gLeisure2012)#
#
intializeAttributes <- function(Hometown, Gender, GPA){#
	matrix <- matrix(nvertices:3)#
	matrix$Hometown <- Hometown#
	matrix$Gender <- Gender#
	matrix$GPA <- GPA#
	matrix#
}#
#
AttributesLeisure2010 <- intializeAttributes(Hometown, Gender, GPA$V1)#
AttributesLeisure2011 <- intializeAttributes(Hometown, Gender, GPA$V2)#
AttributesLeisure2012 <- intializeAttributes(Hometown, Gender, GPA$V3)#
#
getNodeCentralities <- function(Attributes, Network){#
	Attributes$Total.Degree <- degree(Network)#
	Attributes$In.Degree <- degree(Network, cmode = 'indegree')#
	Attributes$Out.Degree <- degree(Network, cmode = 'outdegree')#
	Attributes$Betweenness <- betweenness(Network)#
	Attributes$Closeness <- closeness(Network)#
	Attributes#
	}#
#
AttributesLeisure2010 <- getNodeCentralities(AttributesLeisure2010, gLeisure2010)#
AttributesLeisure2011 <- getNodeCentralities(AttributesLeisure2011, gLeisure2011)#
AttributesLeisure2012 <- getNodeCentralities(AttributesLeisure2012, gLeisure2012)#
#
#Network Visualisation#
visualizeNetwork <- function(Network, Attributes, nvertices, fname){	vsize <- Attributes$In.Degree / 1.5#
	#You might need to play with the number for a better visualization.#
	for (i in 1:nvertices){#
		Attributes$Gender.Color[i]  <- 'grey'#
		if (Attributes$Gender[i] == '0' ) Attributes$Gender.Color[i]  <- 'lightblue2'#
		if (Attributes$Gender[i] == '1' ) Attributes$Gender.Color[i]  <- 'pink'#
		}#
	Network %v% 'Gender.Color' <- as.vector(Attributes$Gender.Color)#
	png(fname, width = 1024, height = 1024, pointsize=24)#
	gplot(Network, gmode = 'digraph', label=Network%v%'GPA', label.cex = 0.8, boxed.labels = T, vertex.cex = vsize, label.bg = Network%v%'Gender.Color')#
	dev.off()#
	Network#
	}#
#
gLeisure2010 <- visualizeNetwork(gLeisure2010, AttributesLeisure2010, nvertices, "Output/Leisure2010_InDegree.png")#
gLeisure2011 <- visualizeNetwork(gLeisure2011, AttributesLeisure2011, nvertices, "Output/Leisure2011_InDegree.png")#
gLeisure2012 <- visualizeNetwork(gLeisure2012, AttributesLeisure2012, nvertices, "Output/Leisure2012_InDegree.png")
library(sna)#
library(network)#
#
Leisure2010 <- read.csv("Input/Leisure2010.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2011 <- read.csv("Input/Leisure2011.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2012 <- read.csv("Input/Leisure2012.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
#
nvertices <- length(Leisure2010)#
#
mLeisure2010 <- as.matrix(Leisure2010[,1:nvertices])#
mLeisure2011 <- as.matrix(Leisure2011[,1:nvertices])#
mLeisure2012 <- as.matrix(Leisure2012[,1:nvertices])#
#
gLeisure2010 <- as.network.matrix(mLeisure2010, matrix.type="adjacency")#
plot(gLeisure2010)#
gLeisure2011 <- as.network.matrix(mLeisure2011, matrix.type="adjacency")#
plot(gLeisure2011)#
gLeisure2012 <- as.network.matrix(mLeisure2012, matrix.type="adjacency")#
plot(gLeisure2012)#
#
Hometown <- read.csv("Input/HomeTown.csv", header = FALSE)#
GPA <- read.csv("Input/GPA.csv", header = FALSE)#
Gender <- read.csv("Input/Gender.csv", header = FALSE)#
#
updateNetwork <-function(Network, Attributes, Name){#
	Network %v% Name <- as.vector(Attributes)#
	Network#
	}#
updateNetworkGPA <-function(Network, Attributes){#
	GPA <- as.vector(Attributes)#
	Network %v% 'GPA' <- as.numeric(GPA)#
	Network#
	}#
#
gLeisure2010 <- updateNetwork(gLeisure2010, Hometown, 'Hometown')#
gLeisure2010 <- updateNetwork(gLeisure2010, Gender, 'Gender')#
gLeisure2010 <- updateNetworkGPA(gLeisure2010, GPA)#
gLeisure2011 <- updateNetwork(gLeisure2011, Hometown, 'Hometown')#
gLeisure2011 <- updateNetwork(gLeisure2011, Gender, 'Gender')#
gLeisure2011 <- updateNetwork(gLeisure2011, GPA)#
gLeisure2012 <- updateNetwork(gLeisure2012, Hometown, 'Hometown')#
gLeisure2012 <- updateNetwork(gLeisure2012, Gender, 'Gender')#
gLeisure2012 <- updateNetwork(gLeisure2012, GPA)#
#
summary(gLeisure2010)#
summary(gLeisure2011)#
summary(gLeisure2012)#
#
intializeAttributes <- function(Hometown, Gender, GPA){#
	matrix <- matrix(nvertices:3)#
	matrix$Hometown <- Hometown#
	matrix$Gender <- Gender#
	matrix$GPA <- GPA#
	matrix#
}#
#
AttributesLeisure2010 <- intializeAttributes(Hometown, Gender, GPA$V1)#
AttributesLeisure2011 <- intializeAttributes(Hometown, Gender, GPA$V2)#
AttributesLeisure2012 <- intializeAttributes(Hometown, Gender, GPA$V3)#
#
getNodeCentralities <- function(Attributes, Network){#
	Attributes$Total.Degree <- degree(Network)#
	Attributes$In.Degree <- degree(Network, cmode = 'indegree')#
	Attributes$Out.Degree <- degree(Network, cmode = 'outdegree')#
	Attributes$Betweenness <- betweenness(Network)#
	Attributes$Closeness <- closeness(Network)#
	Attributes#
	}#
#
AttributesLeisure2010 <- getNodeCentralities(AttributesLeisure2010, gLeisure2010)#
AttributesLeisure2011 <- getNodeCentralities(AttributesLeisure2011, gLeisure2011)#
AttributesLeisure2012 <- getNodeCentralities(AttributesLeisure2012, gLeisure2012)#
#
#Network Visualisation#
visualizeNetwork <- function(Network, Attributes, nvertices, fname){	vsize <- Attributes$In.Degree / 1.5#
	#You might need to play with the number for a better visualization.#
	for (i in 1:nvertices){#
		Attributes$Gender.Color[i]  <- 'grey'#
		if (Attributes$Gender[i] == '0' ) Attributes$Gender.Color[i]  <- 'lightblue2'#
		if (Attributes$Gender[i] == '1' ) Attributes$Gender.Color[i]  <- 'pink'#
		}#
	Network %v% 'Gender.Color' <- as.vector(Attributes$Gender.Color)#
	png(fname, width = 1024, height = 1024, pointsize=24)#
	gplot(Network, gmode = 'digraph', label=Network%v%'GPA', label.cex = 0.8, boxed.labels = T, vertex.cex = vsize, label.bg = Network%v%'Gender.Color')#
	dev.off()#
	Network#
	}#
#
gLeisure2010 <- visualizeNetwork(gLeisure2010, AttributesLeisure2010, nvertices, "Output/Leisure2010_InDegree.png")#
gLeisure2011 <- visualizeNetwork(gLeisure2011, AttributesLeisure2011, nvertices, "Output/Leisure2011_InDegree.png")#
gLeisure2012 <- visualizeNetwork(gLeisure2012, AttributesLeisure2012, nvertices, "Output/Leisure2012_InDegree.png")
degree(gLeisure2010)
Hometown
as.matrix(Hometown)
AttributesLeisure2010 <- cbind(Hometown, Gender, GPA$V1)#
colnames(AttributesLeisure2010) <- c('Hometown','Gender','GPA')
AttributesLeisure2010
library(sna)#
library(network)#
#
Leisure2010 <- read.csv("Input/Leisure2010.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2011 <- read.csv("Input/Leisure2011.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2012 <- read.csv("Input/Leisure2012.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
#
nvertices <- length(Leisure2010)#
#
mLeisure2010 <- as.matrix(Leisure2010[,1:nvertices])#
mLeisure2011 <- as.matrix(Leisure2011[,1:nvertices])#
mLeisure2012 <- as.matrix(Leisure2012[,1:nvertices])#
#
gLeisure2010 <- as.network.matrix(mLeisure2010, matrix.type="adjacency")#
plot(gLeisure2010)#
gLeisure2011 <- as.network.matrix(mLeisure2011, matrix.type="adjacency")#
plot(gLeisure2011)#
gLeisure2012 <- as.network.matrix(mLeisure2012, matrix.type="adjacency")#
plot(gLeisure2012)#
#
Hometown <- read.csv("Input/HomeTown.csv", header = FALSE)#
GPA <- read.csv("Input/GPA.csv", header = FALSE)#
Gender <- read.csv("Input/Gender.csv", header = FALSE)#
#
updateNetwork <-function(Network, Attributes, Name){#
	Network %v% Name <- as.vector(Attributes)#
	Network#
	}#
updateNetworkGPA <-function(Network, Attributes){#
	GPA <- as.vector(Attributes)#
	Network %v% 'GPA' <- as.numeric(GPA)#
	Network#
	}#
#
gLeisure2010 <- updateNetwork(gLeisure2010, Hometown, 'Hometown')#
gLeisure2010 <- updateNetwork(gLeisure2010, Gender, 'Gender')#
gLeisure2010 <- updateNetworkGPA(gLeisure2010, GPA)#
gLeisure2011 <- updateNetwork(gLeisure2011, Hometown, 'Hometown')#
gLeisure2011 <- updateNetwork(gLeisure2011, Gender, 'Gender')#
gLeisure2011 <- updateNetwork(gLeisure2011, GPA)#
gLeisure2012 <- updateNetwork(gLeisure2012, Hometown, 'Hometown')#
gLeisure2012 <- updateNetwork(gLeisure2012, Gender, 'Gender')#
gLeisure2012 <- updateNetwork(gLeisure2012, GPA)
gLeisure2010
library(sna)#
library(network)#
#
Leisure2010 <- read.csv("Input/Leisure2010.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2011 <- read.csv("Input/Leisure2011.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2012 <- read.csv("Input/Leisure2012.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
#
nvertices <- length(Leisure2010)#
#
mLeisure2010 <- as.matrix(Leisure2010[,1:nvertices])#
mLeisure2011 <- as.matrix(Leisure2011[,1:nvertices])#
mLeisure2012 <- as.matrix(Leisure2012[,1:nvertices])#
#
gLeisure2010 <- as.network.matrix(mLeisure2010, matrix.type="adjacency")#
plot(gLeisure2010)#
gLeisure2011 <- as.network.matrix(mLeisure2011, matrix.type="adjacency")#
plot(gLeisure2011)#
gLeisure2012 <- as.network.matrix(mLeisure2012, matrix.type="adjacency")#
plot(gLeisure2012)#
#
Hometown <- read.csv("Input/HomeTown.csv", header = FALSE)#
GPA <- read.csv("Input/GPA.csv", header = FALSE)#
Gender <- read.csv("Input/Gender.csv", header = FALSE)#
#
updateNetwork <-function(Network, Attributes, Name){#
	Network %v% Name <- as.vector(Attributes)#
	Network#
	}#
updateNetworkGPA <-function(Network, Attributes){#
	GPA <- as.vector(Attributes)#
	Network %v% 'GPA' <- as.numeric(GPA)#
	Network#
	}#
#
gLeisure2010 <- updateNetwork(gLeisure2010, Hometown, 'Hometown')#
gLeisure2010 <- updateNetwork(gLeisure2010, Gender, 'Gender')#
gLeisure2010 <- updateNetworkGPA(gLeisure2010, GPA)#
gLeisure2011 <- updateNetwork(gLeisure2011, Hometown, 'Hometown')#
gLeisure2011 <- updateNetwork(gLeisure2011, Gender, 'Gender')#
gLeisure2011 <- updateNetworkGPA(gLeisure2011, GPA)#
gLeisure2012 <- updateNetwork(gLeisure2012, Hometown, 'Hometown')#
gLeisure2012 <- updateNetwork(gLeisure2012, Gender, 'Gender')#
gLeisure2012 <- updateNetworkGPA(gLeisure2012, GPA)
GPA <- as.vector(GPA)
GPA
GPA <- as.vector(GPA#
library(sna)#
library(network)#
#
Leisure2010 <- read.csv("Input/Leisure2010.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2011 <- read.csv("Input/Leisure2011.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2012 <- read.csv("Input/Leisure2012.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
#
nvertices <- length(Leisure2010)#
#
mLeisure2010 <- as.matrix(Leisure2010[,1:nvertices])#
mLeisure2011 <- as.matrix(Leisure2011[,1:nvertices])#
mLeisure2012 <- as.matrix(Leisure2012[,1:nvertices])#
#
gLeisure2010 <- as.network.matrix(mLeisure2010, matrix.type="adjacency")#
plot(gLeisure2010)#
gLeisure2011 <- as.network.matrix(mLeisure2011, matrix.type="adjacency")#
plot(gLeisure2011)#
gLeisure2012 <- as.network.matrix(mLeisure2012, matrix.type="adjacency")#
plot(gLeisure2012)#
#
Hometown <- read.csv("Input/HomeTown.csv", header = FALSE)#
GPA <- read.csv("Input/GPA.csv", header = FALSE)#
Gender <- read.csv("Input/Gender.csv", header = FALSE)#
#
updateNetwork <-function(Network, Attributes, Name){#
	Network %v% Name <- as.vector(Attributes)#
	Network#
	}#
updateNetworkGPA <-function(Network, Attributes){#
	GPA <- as.vector(Attributes)#
	Network %v% 'GPA' <- as.numeric(GPA)#
	Network#
	}#
#
gLeisure2010 <- updateNetwork(gLeisure2010, Hometown, 'Hometown')#
gLeisure2010 <- updateNetwork(gLeisure2010, Gender, 'Gender')#
gLeisure2010 <- updateNetworkGPA(gLeisure2010, GPA$V1)#
gLeisure2011 <- updateNetwork(gLeisure2011, Hometown, 'Hometown')#
gLeisure2011 <- updateNetwork(gLeisure2011, Gender, 'Gender')#
gLeisure2011 <- updateNetworkGPA(gLeisure2011, GPA$V2)#
gLeisure2012 <- updateNetwork(gLeisure2012, Hometown, 'Hometown')#
gLeisure2012 <- updateNetwork(gLeisure2012, Gender, 'Gender')#
gLeisure2012 <- updateNetworkGPA(gLeisure2012, GPA$V3))
GPA <- as.vector(GPA#
library(sna)#
library(network)#
#
Leisure2010 <- read.csv("Input/Leisure2010.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2011 <- read.csv("Input/Leisure2011.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2012 <- read.csv("Input/Leisure2012.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
#
nvertices <- length(Leisure2010)#
#
mLeisure2010 <- as.matrix(Leisure2010[,1:nvertices])#
mLeisure2011 <- as.matrix(Leisure2011[,1:nvertices])#
mLeisure2012 <- as.matrix(Leisure2012[,1:nvertices])#
#
gLeisure2010 <- as.network.matrix(mLeisure2010, matrix.type="adjacency")#
plot(gLeisure2010)#
gLeisure2011 <- as.network.matrix(mLeisure2011, matrix.type="adjacency")#
plot(gLeisure2011)#
gLeisure2012 <- as.network.matrix(mLeisure2012, matrix.type="adjacency")#
plot(gLeisure2012)#
#
Hometown <- read.csv("Input/HomeTown.csv", header = FALSE)#
GPA <- read.csv("Input/GPA.csv", header = FALSE)#
Gender <- read.csv("Input/Gender.csv", header = FALSE)#
#
updateNetwork <-function(Network, Attributes, Name){#
	Network %v% Name <- as.vector(Attributes)#
	Network#
	}#
updateNetworkGPA <-function(Network, Attributes){#
	GPA <- as.vector(Attributes)#
	Network %v% 'GPA' <- as.numeric(GPA)#
	Network#
	}#
#
gLeisure2010 <- updateNetwork(gLeisure2010, Hometown, 'Hometown')#
gLeisure2010 <- updateNetwork(gLeisure2010, Gender, 'Gender')#
gLeisure2010 <- updateNetworkGPA(gLeisure2010, GPA$V1)#
gLeisure2011 <- updateNetwork(gLeisure2011, Hometown, 'Hometown')#
gLeisure2011 <- updateNetwork(gLeisure2011, Gender, 'Gender')#
gLeisure2011 <- updateNetworkGPA(gLeisure2011, GPA$V2)#
gLeisure2012 <- updateNetwork(gLeisure2012, Hometown, 'Hometown')#
gLeisure2012 <- updateNetwork(gLeisure2012, Gender, 'Gender')#
gLeisure2012 <- updateNetworkGPA(gLeisure2012, GPA$V3)
summary(gLeisure2010)#
summary(gLeisure2011)#
summary(gLeisure2012)#
AttributesLeisure2010 <- cbind(Hometown, Gender, GPA$V1)#
colnames(AttributesLeisure2010) <- c('Hometown','Gender','GPA')#
AttributesLeisure2011 <- cbind(Hometown, Gender, GPA$V2)#
colnames(AttributesLeisure2011) <- c('Hometown','Gender','GPA')#
AttributesLeisure2012 <- cbind(Hometown, Gender, GPA$V3)#
colnames(AttributesLeisure2012) <- c('Hometown','Gender','GPA')#
#
getNodeCentralities <- function(Attributes, Network){#
	Attributes$Total.Degree <- degree(Network)#
	Attributes$In.Degree <- degree(Network, cmode = 'indegree')#
	Attributes$Out.Degree <- degree(Network, cmode = 'outdegree')#
	Attributes$Betweenness <- betweenness(Network)#
	Attributes$Closeness <- closeness(Network)#
	Attributes#
	}#
#
AttributesLeisure2010 <- getNodeCentralities(AttributesLeisure2010, gLeisure2010)#
AttributesLeisure2011 <- getNodeCentralities(AttributesLeisure2011, gLeisure2011)#
AttributesLeisure2012 <- getNodeCentralities(AttributesLeisure2012, gLeisure2012)#
#
#Network Visualisation#
visualizeNetwork <- function(Network, Attributes, nvertices, fname){	vsize <- Attributes$In.Degree / 1.5#
	#You might need to play with the number for a better visualization.#
	for (i in 1:nvertices){#
		Attributes$Gender.Color[i]  <- 'grey'#
		if (Attributes$Gender[i] == '0' ) Attributes$Gender.Color[i]  <- 'lightblue2'#
		if (Attributes$Gender[i] == '1' ) Attributes$Gender.Color[i]  <- 'pink'#
		}#
	Network %v% 'Gender.Color' <- as.vector(Attributes$Gender.Color)#
	png(fname, width = 1024, height = 1024, pointsize=24)#
	gplot(Network, gmode = 'digraph', label=Network%v%'GPA', label.cex = 0.8, boxed.labels = T, vertex.cex = vsize, label.bg = Network%v%'Gender.Color')#
	dev.off()#
	Network#
	}#
#
gLeisure2010 <- visualizeNetwork(gLeisure2010, AttributesLeisure2010, nvertices, "Output/Leisure2010_InDegree.png")#
gLeisure2011 <- visualizeNetwork(gLeisure2011, AttributesLeisure2011, nvertices, "Output/Leisure2011_InDegree.png")#
gLeisure2012 <- visualizeNetwork(gLeisure2012, AttributesLeisure2012, nvertices, "Output/Leisure2012_InDegree.png")
gLeisure2010
gplot(gLeisure2010)
AttributesLeisure2010
vsize <- Attributes$In.Degree / 1.5
vsize <- AttributesLeisure2010$In.Degree / 1.5
vsiz
vsize
AttributesLeisure2010$Component.Membership[1]
AttributesLeisure2010$Component.Membership[2]
component.dist(gLeisure2010)$membership
AttributesLeisure2010$Component.Membership <- component.dist(gLeisure2010)$membership
AttributesLeisure2010$Component.Membership
CoEvalModel.R: Routines to run essential network analysis and visualizations#
#                in R.#
# Author: Kemal Akkoyun#
# Date: Jun 5, 2013#
##
##
# Created by Kemal Akkoyun on 6/5/13.#
# Copyright (c) 2013 Kemal Akkoyun. All rights reserved.#
##
# This file is part of CoEvalModel.#
# CoEvalModel is free software: you can redistribute it and/or modify#
# it under the terms of the GNU General Public License as published by#
# the Free Software Foundation, either version 3 of the License, or#
# (at your option) any later version.#
##
# Simple DHT is distributed in the hope that it will be useful,#
# but WITHOUT ANY WARRANTY; without even the implied warranty of#
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the#
# GNU General Public License for more details.#
##
# You should have received a copy of the GNU General Public License#
# along with CoEvalModel.  If not, see <http://www.gnu.org/licenses/>.#
##
################################################################################
#
library(sna)#
library(network)#
#
Leisure2010 <- read.csv("Input/Leisure2010.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2011 <- read.csv("Input/Leisure2011.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2012 <- read.csv("Input/Leisure2012.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
#
nvertices <- length(Leisure2010)#
#
mLeisure2010 <- as.matrix(Leisure2010[,1:nvertices])#
mLeisure2011 <- as.matrix(Leisure2011[,1:nvertices])#
mLeisure2012 <- as.matrix(Leisure2012[,1:nvertices])#
#
gLeisure2010 <- as.network.matrix(mLeisure2010, matrix.type="adjacency")#
plot(gLeisure2010)#
gLeisure2011 <- as.network.matrix(mLeisure2011, matrix.type="adjacency")#
plot(gLeisure2011)#
gLeisure2012 <- as.network.matrix(mLeisure2012, matrix.type="adjacency")#
plot(gLeisure2012)#
#
Hometown <- read.csv("Input/HomeTown.csv", header = FALSE)#
GPA <- read.csv("Input/GPA.csv", header = FALSE)#
Gender <- read.csv("Input/Gender.csv", header = FALSE)#
#
updateNetwork <-function(Network, Attributes, Name){#
	Network %v% Name <- as.vector(Attributes)#
	Network#
	}#
updateNetworkGPA <-function(Network, Attributes){#
	GPA <- as.vector(Attributes)#
	Network %v% 'GPA' <- as.numeric(GPA)#
	Network#
	}#
#
gLeisure2010 <- updateNetwork(gLeisure2010, Hometown, 'Hometown')#
gLeisure2010 <- updateNetwork(gLeisure2010, Gender, 'Gender')#
gLeisure2010 <- updateNetworkGPA(gLeisure2010, GPA$V1)#
gLeisure2011 <- updateNetwork(gLeisure2011, Hometown, 'Hometown')#
gLeisure2011 <- updateNetwork(gLeisure2011, Gender, 'Gender')#
gLeisure2011 <- updateNetworkGPA(gLeisure2011, GPA$V2)#
gLeisure2012 <- updateNetwork(gLeisure2012, Hometown, 'Hometown')#
gLeisure2012 <- updateNetwork(gLeisure2012, Gender, 'Gender')#
gLeisure2012 <- updateNetworkGPA(gLeisure2012, GPA$V3)#
#
summary(gLeisure2010)#
summary(gLeisure2011)#
summary(gLeisure2012)#
AttributesLeisure2010 <- cbind(Hometown, Gender, GPA$V1)#
colnames(AttributesLeisure2010) <- c('Hometown','Gender','GPA')#
AttributesLeisure2011 <- cbind(Hometown, Gender, GPA$V2)#
colnames(AttributesLeisure2011) <- c('Hometown','Gender','GPA')#
AttributesLeisure2012 <- cbind(Hometown, Gender, GPA$V3)#
colnames(AttributesLeisure2012) <- c('Hometown','Gender','GPA')#
#
getNodeCentralities <- function(Attributes, Network){#
	Attributes$Total.Degree <- degree(Network)#
	Attributes$In.Degree <- degree(Network, cmode = 'indegree')#
	Attributes$Out.Degree <- degree(Network, cmode = 'outdegree')#
	Attributes$Betweenness <- betweenness(Network)#
	Attributes$Closeness <- closeness(Network)#
	Attributes#
	}#
#
AttributesLeisure2010 <- getNodeCentralities(AttributesLeisure2010, gLeisure2010)#
AttributesLeisure2011 <- getNodeCentralities(AttributesLeisure2011, gLeisure2011)#
AttributesLeisure2012 <- getNodeCentralities(AttributesLeisure2012, gLeisure2012)#
#
#Network Visualisation#
visualizeNetwork <- function(Network, Attributes, nvertices, fname){	vsize <- Attributes$In.Degree / 1.5#
	#You might need to play with the number for a better visualization.#
	for (i in 1:nvertices){#
		Attributes$Gender.Color[i]  <- 'grey'#
		if (Attributes$Gender[i] == '0' ) Attributes$Gender.Color[i]  <- 'lightblue2'#
		if (Attributes$Gender[i] == '1' ) Attributes$Gender.Color[i]  <- 'pink'#
		}#
	Network %v% 'Gender.Color' <- as.vector(Attributes$Gender.Color)#
	png(fname, width = 1024, height = 1024, pointsize=24)#
	gplot(Network, gmode = 'digraph', label=Network%v%'GPA', label.cex = 0.8, boxed.labels = T, vertex.cex = vsize, label.bg = Network%v%'Gender.Color')#
	dev.off()#
	Network#
	}#
#
gLeisure2010 <- visualizeNetwork(gLeisure2010, AttributesLeisure2010, nvertices, "Output/Leisure2010_InDegree.png")#
gLeisure2011 <- visualizeNetwork(gLeisure2011, AttributesLeisure2011, nvertices, "Output/Leisure2011_InDegree.png")#
gLeisure2012 <- visualizeNetwork(gLeisure2012, AttributesLeisure2012, nvertices, "Output/Leisure2012_InDegree.png")#
#
computeNetworkLevelMeasures <- function(Network, Attributes){#
	Network %n% 'Density' <- gden(Network)#
	Network %n% 'Centralization.Degree' <- centralization(Network, degree)#
	Network %n% 'Centralization.Closeness' <- centralization(Network, closeness)#
	Network %n% 'Centralization.Betweenness' <- centralization(Network, betweenness)#
	Network %n% 'Transitivity (CC)' <- gtrans(Network)#
	Network %n% 'Reciprocity.Dyadic' <- grecip(Network)#
	Network %n% 'Reciprocity.Edgewise' <- grecip(Network, measure ='edgewise')#
	Network %n% 'Components.Strong' <- components(Network)#
	Network %n% 'Components.Weak' <- components(Network, connected ='weak')#
	Network#
	}#
#
gLeisure2010 <- computeNetworkLevelMeasures(gLeisure2010, AttributesLeisure2010)#
gLeisure2011 <- computeNetworkLevelMeasures(gLeisure2011, AttributesLeisure2011)#
gLeisure2012 <- computeNetworkLevelMeasures(gLeisure2012, AttributesLeisure2012)#
#
# Get component membership#
AttributesLeisure2010$Component.Membership <- component.dist(gLeisure2010)$membership#
AttributesLeisure2011$Component.Membership <- component.dist(gLeisure2011)$membership#
AttributesLeisure2012$Component.Membership <- component.dist(gLeisure2012)$membership#
#
visualizeNetworkComponents <- function(Network, Attributes, nvertices, fname, sizes, ratio = 10){	vsize <- sizes / ratio#
	#You might need to play with the number for a better visualization.#
	for (i in 1:nvertices){#
		Attributes$Gender.Color[i]  <- 'grey'#
		if (Attributes$Gender[i] == '0' ) Attributes$Gender.Color[i]  <- 'lightblue2'#
		if (Attributes$Gender[i] == '1' ) Attributes$Gender.Color[i]  <- 'pink'#
		}#
	Network %v% 'Gender.Color' <- as.vector(Attributes$Gender.Color)#
	colors <- colors()#
	for (i in 1:nvertices){#
		c <- Attributes$Component.Membership[i] + 10#
		#a simple yet not so robust color assignment, correct it later.#
		Attributes$Component.Color[i]  <- colors[c]#
		}#
	png(fname, width = 1024, height = 1024, pointsize=24)#
	gplot(Network, gmode = 'digraph', label=Network%v%'GPA',#
		label.cex = 0.8, boxed.labels = T, vertex.cex = vsize,#
		label.bg = Network%v%'Gender.Color',#
		vertex.col = Attributes$Component.Color)#
	dev.off()#
	Network#
	}#
#
gLeisure2010 <- visualizeNetworkComponents(gLeisure2010, AttributesLeisure2010, nvertices, "Output/Leisure2010_InDeg_Components.png", AttributesLeisure2010$In.Degree, 1)#
gLeisure2011 <- visualizeNetworkComponents(gLeisure2011, AttributesLeisure2011, nvertices, "Output/Leisure2011_InDeg_Components.png", AttributesLeisure2011$In.Degree, 1)#
gLeisure2012 <- visualizeNetworkComponents(gLeisure2012, AttributesLeisure2012, nvertices, "Output/Leisure2012_InDeg_Components.png", AttributesLeisure2012$In.Degree, 1)#
######### Results are to be tabulated #############
#
# Sample QAP Test:#
# QAP Test can be used instead of above results. Example for case W2010vsL2010:#
#qt<-qaptest(list(gWork2010, gWork2011),gcor,g1=1,g2=2)#
#summary(qt)#
#plot(qt)#
#
############################ The Linear Model (Linear Regression) Testing: #######
### Group them and test distributions according, i.e., gender and GPA.#
extractValues <- function(GroupVector, type, ValueVector, initvalue){#
	#initvalue helps to form a vector of type initvalue#
	values <-c(initvalue)#
	n <- length(GroupVector)#
	for (i in 1:n){#
		if (GroupVector[i] == type){values <- c(values, ValueVector[i])}#
		}#
	values[-1]#
	}#
#
males <- extractValues(AttributesWork2011$Gender, 'M', AttributesWork2011$GPA, 0)#
females <- extractValues(AttributesWork2011$Gender, 'F', AttributesWork2011$GPA, 0)#
wilcox.test(males, females)#
# Result:#
#data:  malegpa and femalegpa#
#W = 55.5, p-value = 0.9432#
#
#1. GPA i yüksek olanlar çok sosyal#
> cor(AttributesLeisure2010$GPA, AttributesLeisure2010$Out.Degree)#
#  [1] 0.5782907#
> model <- lm(AttributesLeisure2010$GPA ~ AttributesLeisure2010$Out.Degree)#
> summary(model)#
#Call:#
#lm(formula = AttributesLeisure2010$GPA ~ AttributesLeisure2010$Out.Degree)#
#Residuals:#
#     Min       1Q   Median       3Q      Max#
#-1.17633 -0.41633  0.03356  0.40433  1.43378#
#Coefficients:#
#                                 Estimate Std. Error t value Pr(>|t|)#
#(Intercept)                       1.64644    0.25144   6.548 2.86e-06 ***#
#AttributesLeisure2010$Out.Degree  0.26989    0.08735   3.090  0.00603 **#
#---#
#Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1#
#Residual standard error: 0.7004 on 19 degrees of freedom#
#Multiple R-squared: 0.3344,	Adjusted R-squared: 0.2994#
#F-statistic: 9.547 on 1 and 19 DF,  p-value: 0.006031#
#2. GPA'i yüksek olanlarla takılmayı tercih edn az, aksine düşüklerle takılanlar daha çok#
> cor(AttributesLeisure2010$GPA, AttributesLeisure2010$In.Degree)#
# [1] -0.1333235#
> model <- lm(AttributesLeisure2010$GPA ~ AttributesLeisure2010$In.Degree)#
> summary(model)#
#Call:#
#lm(formula = AttributesLeisure2010$GPA ~ AttributesLeisure2010$In.Degree)#
#Residuals:#
#     Min       1Q   Median       3Q      Max#
#-1.41667 -0.40556 -0.03889  0.30889  1.84556#
#Coefficients:#
#                                Estimate Std. Error t value Pr(>|t|)#
#(Intercept)                      2.40556    0.30544   7.876 2.11e-07 ***#
#AttributesLeisure2010$In.Degree -0.06222    0.10611  -0.586    0.565#
#---#
#Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1#
#Residual standard error: 0.8508 on 19 degrees of freedom#
#Multiple R-squared: 0.01778,	Adjusted R-squared: -0.03392#
#F-statistic: 0.3438 on 1 and 19 DF,  p-value: 0.5645#
#
write.csv(AttributesLeisure2010, 'Output/AttributesLeisure2010.csv', row.names = FALSE)#
write.csv(AttributesLeisure2011, 'Output/AttributesLeisure2011.csv', row.names = FALSE)#
write.csv(AttributesLeisure2012, 'Output/AttributesLeisure2012.csv', row.names = FALSE)
gLeisure2010
gplot(gLeisure2010)
gLeisure2010$Component
gLeisure2010$Component.Membership
AttributesLeisure2010$Component.Membership
visualizeNetworkComponents <- function(Network, Attributes, nvertices, fname, sizes, ratio = 10){#
	vsize <- sizes / ratio#
	#You might need to play with the number for a better visualization.#
	for (i in 1:nvertices){#
		Attributes$Gender.Color[i]  <- 'grey'#
		if (Attributes$Gender[i] == '0' ) Attributes$Gender.Color[i]  <- 'lightblue2'#
		if (Attributes$Gender[i] == '1' ) Attributes$Gender.Color[i]  <- 'pink'#
		}#
	Network %v% 'Gender.Color' <- as.vector(Attributes$Gender.Color)#
	colors <- colors()#
	for (i in 1:nvertices){#
		c <- Attributes$Component.Membership[i] + 10#
		#a simple yet not so robust color assignment, correct it later.#
		Attributes$Component.Color[i]  <- colors[c]#
		}#
	png(fname, width = 1024, height = 1024, pointsize=24)#
	gplot(Network, gmode = 'digraph', label=Network%v%'GPA',#
		label.cex = 0.8, boxed.labels = T, vertex.cex = vsize,#
		label.bg = Network%v%'Gender.Color',#
		vertex.col = Attributes$Component.Color)#
	dev.off()#
	Network#
	}
gLeisure2010 <- visualizeNetworkComponents(gLeisure2010, AttributesLeisure2010, nvertices, "Output/Leisure2010_InDeg_Components.png", AttributesLeisure2010$In.Degree, 1)
?gplot
visualizeNetworkComponents <- function(Network, Attributes, nvertices, fname, sizes, ratio = 10){#
	vsize <- sizes / ratio#
	#You might need to play with the number for a better visualization.#
	for (i in 1:nvertices){#
		Attributes$Gender.Color[i]  <- 'grey'#
		if (Attributes$Gender[i] == '0' ) Attributes$Gender.Color[i]  <- 'lightblue2'#
		if (Attributes$Gender[i] == '1' ) Attributes$Gender.Color[i]  <- 'pink'#
		}#
	Network %v% 'Gender.Color' <- as.vector(Attributes$Gender.Color)#
	colors <- colors()
Network
}
gLeisure2010 <- visualizeNetworkComponents(gLeisure2010, AttributesLeisure2010, nvertices, "Output/Leisure2010_InDeg_Components.png", AttributesLeisure2010$In.Degree, 1)
gplot(gLeisure2010)
?gplot
visualizeNetworkComponents <- function(Network, Attributes, nvertices, fname, sizes, ratio = 10){#
	vsize <- sizes / ratio#
	#You might need to play with the number for a better visualization.#
	for (i in 1:nvertices){#
		Attributes$Gender.Color[i]  <- 'grey'#
		if (Attributes$Gender[i] == '0' ) Attributes$Gender.Color[i]  <- 'lightblue2'#
		if (Attributes$Gender[i] == '1' ) Attributes$Gender.Color[i]  <- 'pink'#
		}#
	Network %v% 'Gender.Color' <- as.vector(Attributes$Gender.Color)#
	colors <- colors()#
	for (i in 1:nvertices){#
		c <- Attributes$Component.Membership[i] + 10#
		#a simple yet not so robust color assignment, correct it later.#
		Attributes$Component.Color[i]  <- colors[c]#
		}#
	png(fname, width = 1024, height = 1024, pointsize=24)#
	gplot(Network, gmode = 'digraph', label=Network%v%'GPA',#
		label.cex = 0.8, boxed.labels = T, vertex.cex = vsize,#
		label.bg = Network%v%'Gender.Color',#
		vertex.col = Attributes$Component.Color,#
		label.lty = 3)#
	dev.off()#
	Network#
	}#
#
gLeisure2010 <- visualizeNetworkComponents(gLeisure2010, AttributesLeisure2010, nvertices, "Output/Leisure2010_InDeg_Components.png", AttributesLeisure2010$In.Degree, 1)
gplot(gLeisure2010)
plot(gLeisure2010)
visualizeNetworkComponents <- function(Network, Attributes, nvertices, fname, sizes, ratio = 10){#
	vsize <- sizes / ratio#
	#You might need to play with the number for a better visualization.#
	for (i in 1:nvertices){#
		Attributes$Gender.Color[i]  <- 'grey'#
		if (Attributes$Gender[i] == '0' ) Attributes$Gender.Color[i]  <- 'lightblue2'#
		if (Attributes$Gender[i] == '1' ) Attributes$Gender.Color[i]  <- 'pink'#
		}#
	Network %v% 'Gender.Color' <- as.vector(Attributes$Gender.Color)#
	colors <- colors()#
	for (i in 1:nvertices){#
		c <- Attributes$Component.Membership[i] + 10#
		#a simple yet not so robust color assignment, correct it later.#
		Attributes$Component.Color[i]  <- colors[c]#
		}#
	png(fname, width = 1024, height = 1024, pointsize=24)#
	gplot(Network, gmode = 'digraph', label=Network%v%'GPA',#
		label.cex = 0.8, boxed.labels = F, vertex.cex = vsize,#
		label.bg = Network%v%'Gender.Color',#
		vertex.col = Attributes$Component.Color)#
	dev.off()#
	Network#
	}#
#
gLeisure2010 <- visualizeNetworkComponents(gLeisure2010, AttributesLeisure2010, nvertices, "Output/Leisure2010_InDeg_Components.png", AttributesLeisure2010$In.Degree, 1)
visualizeNetworkComponents <- function(Network, Attributes, nvertices, fname, sizes, ratio = 10){#
	vsize <- sizes / ratio#
	#You might need to play with the number for a better visualization.#
	for (i in 1:nvertices){#
		Attributes$Gender.Color[i]  <- 'grey'#
		if (Attributes$Gender[i] == '0' ) Attributes$Gender.Color[i]  <- 'lightblue2'#
		if (Attributes$Gender[i] == '1' ) Attributes$Gender.Color[i]  <- 'pink'#
		}#
	Network %v% 'Gender.Color' <- as.vector(Attributes$Gender.Color)#
	colors <- colors()#
	for (i in 1:nvertices){#
		c <- Attributes$Component.Membership[i] + 10#
		#a simple yet not so robust color assignment, correct it later.#
		Attributes$Component.Color[i]  <- colors[c]#
		}#
	png(fname, width = 1024, height = 1024, pointsize=24)#
	gplot(Network, gmode = 'digraph', label=Network%v%'GPA',#
		label.cex = 0.8, boxed.labels = F, vertex.cex = vsize,#
		label.bg = Network%v%'Gender.Color',#
		vertex.col = Attributes$Component.Color)#
	dev.off()#
	Network#
	}#
#
gLeisure2010 <- visualizeNetworkComponents(gLeisure2010, AttributesLeisure2010, nvertices, "Output/Leisure2010_InDeg_Components.png", AttributesLeisure2010$In.Degree, 1)
library(sna)#
library(network)#
#
Leisure2010 <- read.csv("Input/Leisure2010.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2011 <- read.csv("Input/Leisure2011.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2012 <- read.csv("Input/Leisure2012.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
#
nvertices <- length(Leisure2010)#
#
mLeisure2010 <- as.matrix(Leisure2010[,1:nvertices])#
mLeisure2011 <- as.matrix(Leisure2011[,1:nvertices])#
mLeisure2012 <- as.matrix(Leisure2012[,1:nvertices])#
#
gLeisure2010 <- as.network.matrix(mLeisure2010, matrix.type="adjacency")#
plot(gLeisure2010)#
gLeisure2011 <- as.network.matrix(mLeisure2011, matrix.type="adjacency")#
plot(gLeisure2011)#
gLeisure2012 <- as.network.matrix(mLeisure2012, matrix.type="adjacency")#
plot(gLeisure2012)#
#
Hometown <- read.csv("Input/HomeTown.csv", header = FALSE)#
GPA <- read.csv("Input/GPA.csv", header = FALSE)#
Gender <- read.csv("Input/Gender.csv", header = FALSE)#
#
updateNetwork <-function(Network, Attributes, Name){#
	Network %v% Name <- as.vector(Attributes)#
	Network#
	}#
updateNetworkGPA <-function(Network, Attributes){#
	GPA <- as.vector(Attributes)#
	Network %v% 'GPA' <- as.numeric(GPA)#
	Network#
	}#
#
gLeisure2010 <- updateNetwork(gLeisure2010, Hometown, 'Hometown')#
gLeisure2010 <- updateNetwork(gLeisure2010, Gender, 'Gender')#
gLeisure2010 <- updateNetworkGPA(gLeisure2010, GPA$V1)#
gLeisure2011 <- updateNetwork(gLeisure2011, Hometown, 'Hometown')#
gLeisure2011 <- updateNetwork(gLeisure2011, Gender, 'Gender')#
gLeisure2011 <- updateNetworkGPA(gLeisure2011, GPA$V2)#
gLeisure2012 <- updateNetwork(gLeisure2012, Hometown, 'Hometown')#
gLeisure2012 <- updateNetwork(gLeisure2012, Gender, 'Gender')#
gLeisure2012 <- updateNetworkGPA(gLeisure2012, GPA$V3)#
#
summary(gLeisure2010)#
summary(gLeisure2011)#
summary(gLeisure2012)#
AttributesLeisure2010 <- cbind(Hometown, Gender, GPA$V1)#
colnames(AttributesLeisure2010) <- c('Hometown','Gender','GPA')#
AttributesLeisure2011 <- cbind(Hometown, Gender, GPA$V2)#
colnames(AttributesLeisure2011) <- c('Hometown','Gender','GPA')#
AttributesLeisure2012 <- cbind(Hometown, Gender, GPA$V3)#
colnames(AttributesLeisure2012) <- c('Hometown','Gender','GPA')#
#
getNodeCentralities <- function(Attributes, Network){#
	Attributes$Total.Degree <- degree(Network)#
	Attributes$In.Degree <- degree(Network, cmode = 'indegree')#
	Attributes$Out.Degree <- degree(Network, cmode = 'outdegree')#
	Attributes$Betweenness <- betweenness(Network)#
	Attributes$Closeness <- closeness(Network)#
	Attributes#
	}#
#
AttributesLeisure2010 <- getNodeCentralities(AttributesLeisure2010, gLeisure2010)#
AttributesLeisure2011 <- getNodeCentralities(AttributesLeisure2011, gLeisure2011)#
AttributesLeisure2012 <- getNodeCentralities(AttributesLeisure2012, gLeisure2012)#
#
#Network Visualisation#
visualizeNetwork <- function(Network, Attributes, nvertices, fname){	vsize <- Attributes$In.Degree / 1.5#
	#You might need to play with the number for a better visualization.#
	for (i in 1:nvertices){#
		Attributes$Gender.Color[i]  <- 'grey'#
		if (Attributes$Gender[i] == 0 ) Attributes$Gender.Color[i]  <- 'lightblue2'#
		if (Attributes$Gender[i] == 1 ) Attributes$Gender.Color[i]  <- 'pink'#
		}#
	Network %v% 'Gender.Color' <- as.vector(Attributes$Gender.Color)#
	png(fname, width = 1024, height = 1024, pointsize=24)#
	gplot(Network, gmode = 'digraph', label=Network%v%'GPA', label.cex = 0.8, boxed.labels = T, vertex.cex = vsize, label.bg = Network%v%'Gender.Color')#
	dev.off()#
	Network#
	}#
#
gLeisure2010 <- visualizeNetwork(gLeisure2010, AttributesLeisure2010, nvertices, "Output/Leisure2010_InDegree.png")#
gLeisure2011 <- visualizeNetwork(gLeisure2011, AttributesLeisure2011, nvertices, "Output/Leisure2011_InDegree.png")#
gLeisure2012 <- visualizeNetwork(gLeisure2012, AttributesLeisure2012, nvertices, "Output/Leisure2012_InDegree.png")
library(sna)#
library(network)#
#
Leisure2010 <- read.csv("Input/Leisure2010.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2011 <- read.csv("Input/Leisure2011.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2012 <- read.csv("Input/Leisure2012.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
#
nvertices <- length(Leisure2010)#
#
mLeisure2010 <- as.matrix(Leisure2010[,1:nvertices])#
mLeisure2011 <- as.matrix(Leisure2011[,1:nvertices])#
mLeisure2012 <- as.matrix(Leisure2012[,1:nvertices])#
#
gLeisure2010 <- as.network.matrix(mLeisure2010, matrix.type="adjacency")#
plot(gLeisure2010)#
gLeisure2011 <- as.network.matrix(mLeisure2011, matrix.type="adjacency")#
plot(gLeisure2011)#
gLeisure2012 <- as.network.matrix(mLeisure2012, matrix.type="adjacency")#
plot(gLeisure2012)#
#
Hometown <- read.csv("Input/HomeTown.csv", header = FALSE)#
GPA <- read.csv("Input/GPA.csv", header = FALSE)#
Gender <- read.csv("Input/Gender.csv", header = FALSE)#
#
updateNetwork <-function(Network, Attributes, Name){#
	Network %v% Name <- as.vector(Attributes)#
	Network#
	}#
updateNetworkGPA <-function(Network, Attributes){#
	GPA <- as.vector(Attributes)#
	Network %v% 'GPA' <- as.numeric(GPA)#
	Network#
	}#
#
gLeisure2010 <- updateNetwork(gLeisure2010, Hometown, 'Hometown')#
gLeisure2010 <- updateNetwork(gLeisure2010, Gender, 'Gender')#
gLeisure2010 <- updateNetworkGPA(gLeisure2010, GPA$V1)#
gLeisure2011 <- updateNetwork(gLeisure2011, Hometown, 'Hometown')#
gLeisure2011 <- updateNetwork(gLeisure2011, Gender, 'Gender')#
gLeisure2011 <- updateNetworkGPA(gLeisure2011, GPA$V2)#
gLeisure2012 <- updateNetwork(gLeisure2012, Hometown, 'Hometown')#
gLeisure2012 <- updateNetwork(gLeisure2012, Gender, 'Gender')#
gLeisure2012 <- updateNetworkGPA(gLeisure2012, GPA$V3)#
#
summary(gLeisure2010)#
summary(gLeisure2011)#
summary(gLeisure2012)#
AttributesLeisure2010 <- cbind(Hometown, Gender, GPA$V1)#
colnames(AttributesLeisure2010) <- c('Hometown','Gender','GPA')#
AttributesLeisure2011 <- cbind(Hometown, Gender, GPA$V2)#
colnames(AttributesLeisure2011) <- c('Hometown','Gender','GPA')#
AttributesLeisure2012 <- cbind(Hometown, Gender, GPA$V3)#
colnames(AttributesLeisure2012) <- c('Hometown','Gender','GPA')#
#
getNodeCentralities <- function(Attributes, Network){#
	Attributes$Total.Degree <- degree(Network)#
	Attributes$In.Degree <- degree(Network, cmode = 'indegree')#
	Attributes$Out.Degree <- degree(Network, cmode = 'outdegree')#
	Attributes$Betweenness <- betweenness(Network)#
	Attributes$Closeness <- closeness(Network)#
	Attributes#
	}#
#
AttributesLeisure2010 <- getNodeCentralities(AttributesLeisure2010, gLeisure2010)#
AttributesLeisure2011 <- getNodeCentralities(AttributesLeisure2011, gLeisure2011)#
AttributesLeisure2012 <- getNodeCentralities(AttributesLeisure2012, gLeisure2012)#
#
#Network Visualisation#
visualizeNetwork <- function(Network, Attributes, nvertices, fname){	vsize <- Attributes$In.Degree / 1.5#
	#You might need to play with the number for a better visualization.#
	for (i in 1:nvertices){#
		Attributes$Gender.Color[i]  <- 'grey'#
		if (Attributes$Gender[i] == 0 ) Attributes$Gender.Color[i]  <- 'lightblue2'#
		if (Attributes$Gender[i] == 1 ) Attributes$Gender.Color[i]  <- 'pink'#
		}#
	Network %v% 'Gender.Color' <- as.vector(Attributes$Gender.Color)#
	png(fname, width = 1024, height = 1024, pointsize=24)#
	gplot(Network, gmode = 'digraph', label=Network%v%'GPA', label.cex = 0.8, boxed.labels = T, vertex.cex = vsize, label.bg = Network%v%'Gender.Color')#
	dev.off()#
	Network#
	}#
#
gLeisure2010 <- visualizeNetwork(gLeisure2010, AttributesLeisure2010, nvertices, "Output/Leisure2010_InDegree.png")#
gLeisure2011 <- visualizeNetwork(gLeisure2011, AttributesLeisure2011, nvertices, "Output/Leisure2011_InDegree.png")#
gLeisure2012 <- visualizeNetwork(gLeisure2012, AttributesLeisure2012, nvertices, "Output/Leisure2012_InDegree.png")#
#
computeNetworkLevelMeasures <- function(Network, Attributes){#
	Network %n% 'Density' <- gden(Network)#
	Network %n% 'Centralization.Degree' <- centralization(Network, degree)#
	Network %n% 'Centralization.Closeness' <- centralization(Network, closeness)#
	Network %n% 'Centralization.Betweenness' <- centralization(Network, betweenness)#
	Network %n% 'Transitivity (CC)' <- gtrans(Network)#
	Network %n% 'Reciprocity.Dyadic' <- grecip(Network)#
	Network %n% 'Reciprocity.Edgewise' <- grecip(Network, measure ='edgewise')#
	Network %n% 'Components.Strong' <- components(Network)#
	Network %n% 'Components.Weak' <- components(Network, connected ='weak')#
	Network#
	}#
#
gLeisure2010 <- computeNetworkLevelMeasures(gLeisure2010, AttributesLeisure2010)#
gLeisure2011 <- computeNetworkLevelMeasures(gLeisure2011, AttributesLeisure2011)#
gLeisure2012 <- computeNetworkLevelMeasures(gLeisure2012, AttributesLeisure2012)#
#
AttributesLeisure2010$Component.Membership <- component.dist(gLeisure2010)$membership#
AttributesLeisure2011$Component.Membership <- component.dist(gLeisure2011)$membership#
AttributesLeisure2012$Component.Membership <- component.dist(gLeisure2012)$membership#
#
visualizeNetworkComponents <- function(Network, Attributes, nvertices, fname, sizes, ratio = 10){#
	vsize <- sizes / ratio#
	for (i in 1:nvertices){#
		Attributes$Gender.Color[i]  <- 'grey'#
		if (Attributes$Gender[i] == '0' ) Attributes$Gender.Color[i]  <- 'lightblue2'#
		if (Attributes$Gender[i] == '1' ) Attributes$Gender.Color[i]  <- 'pink'#
		}#
	Network %v% 'Gender.Color' <- as.vector(Attributes$Gender.Color)#
	colors <- colors()#
	for (i in 1:nvertices){#
		c <- Attributes$Component.Membership[i] + 10#
		#a simple yet not so robust color assignment, correct it later.#
		Attributes$Component.Color[i]  <- colors[c]#
		}#
	png(fname, width = 1024, height = 1024, pointsize=24)#
	gplot(Network, gmode = 'digraph', label=Network%v%'GPA',#
		label.cex = 0.8, boxed.labels = T, vertex.cex = vsize,#
		label.bg = Network%v%'Gender.Color',#
		vertex.col = Attributes$Component.Color)#
	dev.off()#
	Network#
	}#
#
gLeisure2010 <- visualizeNetworkComponents(gLeisure2010, AttributesLeisure2010, nvertices, "Output/Leisure2010_InDeg_Components.png", AttributesLeisure2010$In.Degree, 1)#
gLeisure2011 <- visualizeNetworkComponents(gLeisure2011, AttributesLeisure2011, nvertices, "Output/Leisure2011_InDeg_Components.png", AttributesLeisure2011$In.Degree, 1)#
gLeisure2012 <- visualizeNetworkComponents(gLeisure2012, AttributesLeisure2012, nvertices, "Output/Leisure2012_InDeg_Components.png", AttributesLeisure2012$In.Degree, 1)
CoEvalModel.R: Routines to run essential network analysis and visualizations#
#                in R.#
# Author: Kemal Akkoyun#
# Date: Jun 5, 2013#
##
##
# Created by Kemal Akkoyun on 6/5/13.#
# Copyright (c) 2013 Kemal Akkoyun. All rights reserved.#
##
# This file is part of CoEvalModel.#
# CoEvalModel is free software: you can redistribute it and/or modify#
# it under the terms of the GNU General Public License as published by#
# the Free Software Foundation, either version 3 of the License, or#
# (at your option) any later version.#
##
# Simple DHT is distributed in the hope that it will be useful,#
# but WITHOUT ANY WARRANTY; without even the implied warranty of#
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the#
# GNU General Public License for more details.#
##
# You should have received a copy of the GNU General Public License#
# along with CoEvalModel.  If not, see <http://www.gnu.org/licenses/>.#
##
################################################################################
#
library(sna)#
library(network)#
#
Leisure2010 <- read.csv("Input/Leisure2010.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2011 <- read.csv("Input/Leisure2011.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
Leisure2012 <- read.csv("Input/Leisure2012.csv", sep = "\t", header = FALSE, stringsAsFactors =F)#
#
nvertices <- length(Leisure2010)#
#
mLeisure2010 <- as.matrix(Leisure2010[,1:nvertices])#
mLeisure2011 <- as.matrix(Leisure2011[,1:nvertices])#
mLeisure2012 <- as.matrix(Leisure2012[,1:nvertices])#
#
gLeisure2010 <- as.network.matrix(mLeisure2010, matrix.type="adjacency")#
plot(gLeisure2010)#
gLeisure2011 <- as.network.matrix(mLeisure2011, matrix.type="adjacency")#
plot(gLeisure2011)#
gLeisure2012 <- as.network.matrix(mLeisure2012, matrix.type="adjacency")#
plot(gLeisure2012)#
#
Hometown <- read.csv("Input/HomeTown.csv", header = FALSE)#
GPA <- read.csv("Input/GPA.csv", header = FALSE)#
Gender <- read.csv("Input/Gender.csv", header = FALSE)#
#
updateNetwork <-function(Network, Attributes, Name){#
	Network %v% Name <- as.vector(Attributes)#
	Network#
	}#
updateNetworkGPA <-function(Network, Attributes){#
	GPA <- as.vector(Attributes)#
	Network %v% 'GPA' <- as.numeric(GPA)#
	Network#
	}#
#
gLeisure2010 <- updateNetwork(gLeisure2010, Hometown, 'Hometown')#
gLeisure2010 <- updateNetwork(gLeisure2010, Gender, 'Gender')#
gLeisure2010 <- updateNetworkGPA(gLeisure2010, GPA$V1)#
gLeisure2011 <- updateNetwork(gLeisure2011, Hometown, 'Hometown')#
gLeisure2011 <- updateNetwork(gLeisure2011, Gender, 'Gender')#
gLeisure2011 <- updateNetworkGPA(gLeisure2011, GPA$V2)#
gLeisure2012 <- updateNetwork(gLeisure2012, Hometown, 'Hometown')#
gLeisure2012 <- updateNetwork(gLeisure2012, Gender, 'Gender')#
gLeisure2012 <- updateNetworkGPA(gLeisure2012, GPA$V3)#
#
summary(gLeisure2010)#
summary(gLeisure2011)#
summary(gLeisure2012)#
AttributesLeisure2010 <- cbind(Hometown, Gender, GPA$V1)#
colnames(AttributesLeisure2010) <- c('Hometown','Gender','GPA')#
AttributesLeisure2011 <- cbind(Hometown, Gender, GPA$V2)#
colnames(AttributesLeisure2011) <- c('Hometown','Gender','GPA')#
AttributesLeisure2012 <- cbind(Hometown, Gender, GPA$V3)#
colnames(AttributesLeisure2012) <- c('Hometown','Gender','GPA')#
#
getNodeCentralities <- function(Attributes, Network){#
	Attributes$Total.Degree <- degree(Network)#
	Attributes$In.Degree <- degree(Network, cmode = 'indegree')#
	Attributes$Out.Degree <- degree(Network, cmode = 'outdegree')#
	Attributes$Betweenness <- betweenness(Network)#
	Attributes$Closeness <- closeness(Network)#
	Attributes#
	}#
#
AttributesLeisure2010 <- getNodeCentralities(AttributesLeisure2010, gLeisure2010)#
AttributesLeisure2011 <- getNodeCentralities(AttributesLeisure2011, gLeisure2011)#
AttributesLeisure2012 <- getNodeCentralities(AttributesLeisure2012, gLeisure2012)#
#
#Network Visualisation#
visualizeNetwork <- function(Network, Attributes, nvertices, fname){#
	vsize <- Attributes$In.Degree / 1.5#
	#You might need to play with the number for a better visualization.#
	for (i in 1:nvertices){#
		Attributes$Gender.Color[i]  <- 'grey'#
		if (Attributes$Gender[i] == 0 ) Attributes$Gender.Color[i]  <- 'lightblue2'#
		if (Attributes$Gender[i] == 1 ) Attributes$Gender.Color[i]  <- 'pink'#
		}#
	Network %v% 'Gender.Color' <- as.vector(Attributes$Gender.Color)#
	png(fname, width = 1024, height = 1024, pointsize=24)#
	gplot(Network, gmode = 'digraph', label=Network%v%'GPA', label.cex = 0.8, boxed.labels = T, vertex.cex = vsize, label.bg = Network%v%'Gender.Color')#
	dev.off()#
	Network#
	}#
#
gLeisure2010 <- visualizeNetwork(gLeisure2010, AttributesLeisure2010, nvertices, "Output/Leisure2010_InDegree.png")#
gLeisure2011 <- visualizeNetwork(gLeisure2011, AttributesLeisure2011, nvertices, "Output/Leisure2011_InDegree.png")#
gLeisure2012 <- visualizeNetwork(gLeisure2012, AttributesLeisure2012, nvertices, "Output/Leisure2012_InDegree.png")#
#
computeNetworkLevelMeasures <- function(Network, Attributes){#
	Network %n% 'Density' <- gden(Network)#
	Network %n% 'Centralization.Degree' <- centralization(Network, degree)#
	Network %n% 'Centralization.Closeness' <- centralization(Network, closeness)#
	Network %n% 'Centralization.Betweenness' <- centralization(Network, betweenness)#
	Network %n% 'Transitivity (CC)' <- gtrans(Network)#
	Network %n% 'Reciprocity.Dyadic' <- grecip(Network)#
	Network %n% 'Reciprocity.Edgewise' <- grecip(Network, measure ='edgewise')#
	Network %n% 'Components.Strong' <- components(Network)#
	Network %n% 'Components.Weak' <- components(Network, connected ='weak')#
	Network#
	}#
#
gLeisure2010 <- computeNetworkLevelMeasures(gLeisure2010, AttributesLeisure2010)#
gLeisure2011 <- computeNetworkLevelMeasures(gLeisure2011, AttributesLeisure2011)#
gLeisure2012 <- computeNetworkLevelMeasures(gLeisure2012, AttributesLeisure2012)#
#
AttributesLeisure2010$Component.Membership <- component.dist(gLeisure2010)$membership#
AttributesLeisure2011$Component.Membership <- component.dist(gLeisure2011)$membership#
AttributesLeisure2012$Component.Membership <- component.dist(gLeisure2012)$membership#
#
visualizeNetworkComponents <- function(Network, Attributes, nvertices, fname, sizes, ratio = 15){#
	vsize <- sizes / ratio#
	for (i in 1:nvertices){#
		Attributes$Gender.Color[i]  <- 'grey'#
		if (Attributes$Gender[i] == '0' ) Attributes$Gender.Color[i]  <- 'lightblue2'#
		if (Attributes$Gender[i] == '1' ) Attributes$Gender.Color[i]  <- 'pink'#
		}#
	Network %v% 'Gender.Color' <- as.vector(Attributes$Gender.Color)#
	colors <- colors()#
	for (i in 1:nvertices){#
		c <- Attributes$Component.Membership[i] + 10#
		#a simple yet not so robust color assignment, correct it later.#
		Attributes$Component.Color[i]  <- colors[c]#
		}#
	png(fname, width = 1024, height = 1024, pointsize=24)#
	gplot(Network, gmode = 'digraph', label=Network%v%'GPA',#
		label.cex = 0.8, boxed.labels = T, vertex.cex = vsize,#
		label.bg = Network%v%'Gender.Color',#
		vertex.col = Attributes$Component.Color)#
	dev.off()#
	Network#
	}#
#
gLeisure2010 <- visualizeNetworkComponents(gLeisure2010, AttributesLeisure2010, nvertices, "Output/Leisure2010_InDeg_Components.png", AttributesLeisure2010$In.Degree, 1)#
gLeisure2011 <- visualizeNetworkComponents(gLeisure2011, AttributesLeisure2011, nvertices, "Output/Leisure2011_InDeg_Components.png", AttributesLeisure2011$In.Degree, 1)#
gLeisure2012 <- visualizeNetworkComponents(gLeisure2012, AttributesLeisure2012, nvertices, "Output/Leisure2012_InDeg_Components.png", AttributesLeisure2012$In.Degree, 1)#
######### Results are to be tabulated #############
#
# Sample QAP Test:#
# QAP Test can be used instead of above results. Example for case W2010vsL2010:#
#qt<-qaptest(list(gWork2010, gWork2011),gcor,g1=1,g2=2)#
#summary(qt)#
#plot(qt)#
#
############################ The Linear Model (Linear Regression) Testing: #######
### Group them and test distributions according, i.e., gender and GPA.#
extractValues <- function(GroupVector, type, ValueVector, initvalue){#
	#initvalue helps to form a vector of type initvalue#
	values <-c(initvalue)#
	n <- length(GroupVector)#
	for (i in 1:n){#
		if (GroupVector[i] == type){values <- c(values, ValueVector[i])}#
		}#
	values[-1]#
	}#
#
males <- extractValues(AttributesWork2011$Gender, 'M', AttributesWork2011$GPA, 0)#
females <- extractValues(AttributesWork2011$Gender, 'F', AttributesWork2011$GPA, 0)#
wilcox.test(males, females)#
# Result:#
#data:  malegpa and femalegpa#
#W = 55.5, p-value = 0.9432#
#
#1. GPA i yüksek olanlar çok sosyal#
> cor(AttributesLeisure2010$GPA, AttributesLeisure2010$Out.Degree)#
#  [1] 0.5782907#
> model <- lm(AttributesLeisure2010$GPA ~ AttributesLeisure2010$Out.Degree)#
> summary(model)#
#Call:#
#lm(formula = AttributesLeisure2010$GPA ~ AttributesLeisure2010$Out.Degree)#
#Residuals:#
#     Min       1Q   Median       3Q      Max#
#-1.17633 -0.41633  0.03356  0.40433  1.43378#
#Coefficients:#
#                                 Estimate Std. Error t value Pr(>|t|)#
#(Intercept)                       1.64644    0.25144   6.548 2.86e-06 ***#
#AttributesLeisure2010$Out.Degree  0.26989    0.08735   3.090  0.00603 **#
#---#
#Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1#
#Residual standard error: 0.7004 on 19 degrees of freedom#
#Multiple R-squared: 0.3344,	Adjusted R-squared: 0.2994#
#F-statistic: 9.547 on 1 and 19 DF,  p-value: 0.006031#
#2. GPA'i yüksek olanlarla takılmayı tercih edn az, aksine düşüklerle takılanlar daha çok#
> cor(AttributesLeisure2010$GPA, AttributesLeisure2010$In.Degree)#
# [1] -0.1333235#
> model <- lm(AttributesLeisure2010$GPA ~ AttributesLeisure2010$In.Degree)#
> summary(model)#
#Call:#
#lm(formula = AttributesLeisure2010$GPA ~ AttributesLeisure2010$In.Degree)#
#Residuals:#
#     Min       1Q   Median       3Q      Max#
#-1.41667 -0.40556 -0.03889  0.30889  1.84556#
#Coefficients:#
#                                Estimate Std. Error t value Pr(>|t|)#
#(Intercept)                      2.40556    0.30544   7.876 2.11e-07 ***#
#AttributesLeisure2010$In.Degree -0.06222    0.10611  -0.586    0.565#
#---#
#Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1#
#Residual standard error: 0.8508 on 19 degrees of freedom#
#Multiple R-squared: 0.01778,	Adjusted R-squared: -0.03392#
#F-statistic: 0.3438 on 1 and 19 DF,  p-value: 0.5645#
#
write.csv(AttributesLeisure2010, 'Output/AttributesLeisure2010.csv', row.names = FALSE)#
write.csv(AttributesLeisure2011, 'Output/AttributesLeisure2011.csv', row.names = FALSE)#
write.csv(AttributesLeisure2012, 'Output/AttributesLeisure2012.csv', row.names = FALSE)
males <- extractValues(AttributesWork2011$Gender, 0, AttributesWork2011$GPA, 0)#
females <- extractValues(AttributesWork2011$Gender, 1, AttributesWork2011$GPA, 0)#
wilcox.test(males, females)
males <- extractValues(AttributesWork2011$Gender, 0, AttributesWork2011$GPA, 0)#
females <- extractValues(AttributesWork2011$Gender, 1, AttributesWork2011$GPA, 0)#
wilcox.test(males, females)
extractValues <- function(GroupVector, type, ValueVector, initvalue){#
	#initvalue helps to form a vector of type initvalue#
	values <-c(initvalue)#
	n <- length(GroupVector)#
	for (i in 1:n){#
		if (GroupVector[i] == type){values <- c(values, ValueVector[i])}#
		}#
	values[-1]#
	}
males <- extractValues(AttributesLeisure2011$Gender, 0, AttributesLeisure2011$GPA, 0)#
females <- extractValues(AttributesLeisure2011$Gender, 1, AttributesLeisure2011$GPA, 0)
wilcox.test(males, females)
cor(AttributesLeisure2010$GPA, AttributesLeisure2010$Out.Degree)
model <- lm(AttributesLeisure2010$GPA ~ AttributesLeisure2010$Out.Degree)#
summary(model)
cor(AttributesLeisure2010$GPA, AttributesLeisure2010$In.Degree)
model <- lm(AttributesLeisure2010$GPA ~ AttributesLeisure2010$In.Degree)#
summary(model)
cor(AttributesLeisure2011$GPA, AttributesLeisure2011$Out.Degree)
model <- lm(AttributesLeisure2011$GPA ~ AttributesLeisure2011$Out.Degree)#
summary(model)
cor(AttributesLeisure2012$GPA, AttributesLeisure2012$Out.Degree)
model <- lm(AttributesLeisure2011$GPA ~ AttributesLeisure2011$Out.Degree)#
summary(model)
model <- lm(AttributesLeisure2012$GPA ~ AttributesLeisure2012$Out.Degree)#
summary(model)
cor(AttributesLeisure2011$GPA, AttributesLeisure2011$In.Degree)
model <- lm(AttributesLeisure2011$GPA ~ AttributesLeisure2011$In.Degree)
summary(model)
model <- lm(AttributesLeisure2012$GPA ~ AttributesLeisure2012$In.Degree)
summary(model)
model <- lm(AttributesLeisure2011$GPA ~ AttributesLeisure2011$Total.Degree)#
summary(model)
model <- lm(AttributesLeisure2010$GPA ~ AttributesLeisure2010$Total.Degree)#
summary(model)
model <- lm(AttributesLeisure2012$GPA ~ AttributesLeisure2012$Total.Degree)#
summary(model)
model <- lm(AttributesLeisure2011$GPA ~ AttributesLeisure2011$Betweenness)#
summary(model)
model <- lm(AttributesLeisure2012$GPA ~ AttributesLeisure2012$Betweenness)#
summary(model)
model <- lm(AttributesLeisure2010$GPA ~ AttributesLeisure2010$Betweenness)#
summary(model)
model <- lm(AttributesLeisure2010$GPA ~ AttributesLeisure2010$Hometown)#
summary(model)
model <- lm(AttributesLeisure2010$GPA ~ AttributesLeisure2010$Gneder)#
summary(model)
model <- lm(AttributesLeisure2010$GPA ~ AttributesLeisure2010$Gender)#
summary(model)
model <- lm(AttributesLeisure2011$GPA ~ AttributesLeisure2011$Hometown)#
summary(model)
model <- lm(AttributesLeisure2012$GPA ~ AttributesLeisure2012$Hometown)#
summary(model)
model <- lm(AttributesLeisure2011$GPA ~ AttributesLeisure2011$Gender)#
summary(model)
model <- lm(AttributesLeisure2012$GPA ~ AttributesLeisure2012$Gender)#
summary(model)
cor(AttributesLeisure2012$GPA, AttributesLeisure2012$Gender)
